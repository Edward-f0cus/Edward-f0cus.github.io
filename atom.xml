<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Edward Shen's blog]]></title>
  <subtitle><![CDATA[Somewhere I belong...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-26T07:01:19.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Edward Shen]]></name>
    <email><![CDATA[shenwei604@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[我就试试]]></title>
    <link href="http://yoursite.com/2015/12/26/%E6%88%91%E5%B0%B1%E8%AF%95%E8%AF%95/"/>
    <id>http://yoursite.com/2015/12/26/我就试试/</id>
    <published>2015-12-26T07:00:44.000Z</published>
    <updated>2015-12-26T07:01:19.000Z</updated>
    <content type="html"><![CDATA[<p>我试一下哈</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我试一下哈</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[my new post]]></title>
    <link href="http://yoursite.com/2015/12/26/my-new-post/"/>
    <id>http://yoursite.com/2015/12/26/my-new-post/</id>
    <published>2015-12-26T06:55:34.000Z</published>
    <updated>2015-12-26T06:57:42.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 本质上来说, 就是闭包加python的一个语法糖. </em></strong><br>亲们,让我们从头说起:</p>
<ul>
<li>python中一切皆对象,方法也是一个对象.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line">isinstance(foo, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>所以TA可以被作为方法的形参传进去, 也可以作为return value被return.<br>我们先记下这一点, 后面会详细说明.</p>
<ul>
<li>内嵌方法(nested function):<br>python允许在方法内部定义一个方法, 内部方法可以引用操作外部方法的变量.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    para = <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'this is outer func'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'this is inner func'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'outer para in inner is %s'</span> % para</span><br><span class="line">        <span class="keyword">return</span> para</span><br><span class="line">    <span class="keyword">return</span> inner()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">print</span> outer()</span><br><span class="line"> <span class="keyword">print</span> para</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出如下:<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> <span class="keyword">outer</span> func</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> inner func</span><br><span class="line"><span class="keyword">outer</span> para <span class="keyword">in</span> inner <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">NameError: name <span class="string">'para'</span> <span class="keyword">is</span> not defined</span><br></pre></td></tr></table></figure></p>
<p>一个方法内部变量的生命周期, 应该是在执行这个方法时被define, 方法执行完毕后被delete. 在这个例子里print outer()之后, para必定不能再被使用, 如果再加一个print para, 必定会报错. okay, 目前为止, 一切都是按我们预想的来, 看起来也很好理解.</p>
<ul>
<li>闭包（closures)<br>我们把上面的例子稍微改一改：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span> </span><br><span class="line">      para = <span class="number">1</span> </span><br><span class="line">      <span class="keyword">print</span> <span class="string">'this is outer func'</span> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </span><br><span class="line">              <span class="keyword">print</span> <span class="string">'this is inner func'</span> </span><br><span class="line">              <span class="keyword">print</span> <span class="string">'outer para in inner is %s'</span> % para</span><br><span class="line">              <span class="keyword">return</span> para</span><br><span class="line">      <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">closure = outer()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出如下：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> <span class="keyword">outer</span> func</span><br></pre></td></tr></table></figure></p>
<p>这次我们把outer()的返回值改成inner这个方法本身。是不是看起来有点怪怪的？前面已经提到，方法在python里本身也是一个对象，so， why not？<br>从输出可以看出，调用outer()之后，inner方法并没有被执行。这也是好理解的。在python中，“()”是调用操作符，既然outer返回的是inner而不是inner()，说明inner就没有被call，所以它没有执行。cool，到这里虽然看起来有些复杂，但还是在比较好理解的范围之内。<br>我们继续：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print <span class="function"><span class="title">closure</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> inner func</span><br><span class="line"><span class="keyword">outer</span> para <span class="keyword">in</span> inner <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>这个是不是就有点难理解了？outer方法已经被执行完了，那么para的生命周期已经结束，inner怎么还可以用它？不报错？<br><strong> 这就是python对闭包的支持。</strong><br>如果我们dir一个方法(dir(closure))，会看到有func_closure这么一个内置的属性。如果此方法是一个闭包，那就会把闭包里用到的对象塞到这个属性里。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> closure.func_closure</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;cell <span class="preprocessor">at</span> <span class="number">0x7f42d46dd280</span>: <span class="keyword">int</span> object <span class="preprocessor">at</span> <span class="number">0x16cd158</span>&gt;,)</span><br></pre></td></tr></table></figure></p>
<p>这个int对象就是我们例子里可爱的para.</p>
<ul>
<li>装饰器（decorator）:<br>升级一下上个例子， 给outer改个名字，同时传个参数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decor</span><span class="params">(func)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">'this is func decor'</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'this is inner func'</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'call func in inner.'</span></span><br><span class="line">                 func()</span><br><span class="line">       <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line">foo = decor(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this is <span class="function"><span class="keyword">func</span> <span class="title">decor</span></span></span><br><span class="line">this is inner <span class="function"><span class="keyword">func</span></span></span><br><span class="line"><span class="built_in">call</span> <span class="function"><span class="keyword">func</span> <span class="title">in</span> <span class="title">inner</span>.</span></span><br><span class="line">this is <span class="function"><span class="keyword">func</span> <span class="title">foo</span></span></span><br></pre></td></tr></table></figure></p>
<p>改名之后的方法叫decor，加了个参数func。把decor(foo)重新赋值给foo, 并执行foo。<br>结果是原有的foo被执行，还有我们的inner。是不是很酷，相当于给foo加了个包装(wrapper)。<br>我们离胜利仅剩一步！<br>@这个符号是python对闭包采用的一个语法糖（syntax suger）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decor</span><span class="params">(func)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">'this is func decor'</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'this is inner func'</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'call func in inner.'</span></span><br><span class="line">                 func()</span><br><span class="line">       <span class="keyword">return</span> inner</span><br><span class="line"><span class="decorator">@decor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># foo = decor(foo)</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p>
<p>一样的输出：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this is <span class="function"><span class="keyword">func</span> <span class="title">decor</span></span></span><br><span class="line">this is inner <span class="function"><span class="keyword">func</span></span></span><br><span class="line"><span class="built_in">call</span> <span class="function"><span class="keyword">func</span> <span class="title">in</span> <span class="title">inner</span>.</span></span><br><span class="line">this is <span class="function"><span class="keyword">func</span> <span class="title">foo</span></span></span><br></pre></td></tr></table></figure></p>
<p>用了@语法糖，就相当于去掉了foo = decor(foo)这一步，让代码看起来更优雅，更readable。<br>That’s it。这就是装饰器。<br>如需转载， 请注明出处！谢谢</p>
<blockquote>
<p>还可以用class来做装饰器，请参考：<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808" target="_blank" rel="external">class decorator</a><br>也可以给装饰器传参数，请参考：<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845" target="_blank" rel="external">decorator with arguments</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong><em> 本质上来说, 就是闭包加python的一个语法糖. </em></strong><br>亲们,让我们从头说起:</p>
<ul>
<li>python中一切皆对象,方法也是一个对象.<figure class="highlight python">]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/12/26/hello-world/"/>
    <id>http://yoursite.com/2015/12/26/hello-world/</id>
    <published>2015-12-26T03:06:03.000Z</published>
    <updated>2015-12-26T03:06:03.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
