<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Edward Shen's blog]]></title>
  <subtitle><![CDATA[Somewhere I belong...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-25T16:41:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Edward Shen]]></name>
    <email><![CDATA[shenwei604@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[argparser模块学习]]></title>
    <link href="http://yoursite.com/2016/01/26/argparser%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/01/26/argparser模块学习/</id>
    <published>2016-01-25T16:25:23.000Z</published>
    <updated>2016-01-25T16:41:48.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>经常用的模块, 也是老用老忘, 用一次学一次. 写篇blog, 加深印象. refer to: <a href="https://docs.python.org/2.7/howto/argparse.html#id1" target="_blank" rel="external">python howto</a></p>
</blockquote>
<h5 id="argument_u548Cparameter_u7684_u533A_u522B_3A"><a href="#argument_u548Cparameter_u7684_u533A_u522B_3A" class="headerlink" title="argument和parameter的区别:"></a>argument和parameter的区别:</h5><p>其实跟今天的主题没多大关系, 顺便说一下, 因为看一些英文的技术文章, 会经常用这两个概念.<br>parameter就相当于java里的”形参”:<br><em>方法/函数定义时在括号里的参数</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">explain_param_vs_arg</span><span class="params">(param1, param2)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> param1, param2</span><br></pre></td></tr></table></figure></p>
<p>argument就是所谓”实参”:<br><em>调用方法/函数时括号里的参数</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain_param_vs_arg(<span class="string">"arg1"</span>, <span class="string">"arg2"</span>)</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h5 id="Positional_arguments_3A"><a href="#Positional_arguments_3A" class="headerlink" title="Positional arguments:"></a>Positional arguments:</h5><p>例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"echo"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.foo</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py</span><br><span class="line">usage: prog.py [-h] echo</span><br><span class="line">prog.py: error: the following arguments are required: echo</span><br><span class="line"></span><br><span class="line">$ python prog.py --help</span><br><span class="line">usage: prog.py [-h] echo</span><br><span class="line"></span><br><span class="line">positional arguments: </span><br><span class="line">  echo</span><br><span class="line">optional arguments: </span><br><span class="line">  -h, --help show this help message <span class="keyword">and</span> exit</span><br><span class="line"></span><br><span class="line">$ python prog.py foo</span><br><span class="line">foo</span><br></pre></td></tr></table></figure></p>
<p>上面的例子,基本没什么用. 来个有用点的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"echo"</span>, help=<span class="string">"echo the string you use here"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.echo</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">prog</span>.py -<span class="literal">h</span></span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] echo</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">   echo     echo the string you <span class="keyword">use</span> here</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line"> -<span class="keyword">h</span>, --<span class="keyword">help</span>       show this <span class="keyword">help</span> message and <span class="keyword">exit</span></span><br></pre></td></tr></table></figure></p>
<p>加了help参数之后, -h就加了对echo这个参数的说明.<br>来个更有用点的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py 4</span><br><span class="line">Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line"> <span class="keyword">File</span> <span class="string">"prog.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">   print args.<span class="keyword">square</span>**<span class="number">2</span></span><br><span class="line">TypeError: unsupported operand <span class="keyword">type</span>(s) <span class="keyword">for</span> ** <span class="keyword">or</span> <span class="keyword">pow</span>(): <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'int'</span></span></span><br></pre></td></tr></table></figure></p>
<p>结果不太理想. 是因为argparse把我们给的参数认成了string. 我们得告诉TA把square当成int来处理:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, help=<span class="string">"display a square of a given number"</span>,</span><br><span class="line">                                   type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> four</span><br><span class="line">usage: prog<span class="class">.py</span> [-h] square</span><br><span class="line">prog<span class="class">.py</span>: error: argument square: invalid int value: <span class="string">'four'</span></span><br></pre></td></tr></table></figure></p>
<p>这把就对了. 如果参数非法了还会报错.</p>
<h5 id="Optional_arguments"><a href="#Optional_arguments" class="headerlink" title="Optional arguments"></a>Optional arguments</h5><p>前面介绍了positional arguments. 接下来我们看看optional arguments:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"--verbosity"</span>, help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"verbosity turned on"</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">prog</span>.py --verbosity 1</span><br><span class="line">verbosity turned <span class="keyword">on</span></span><br><span class="line">$ python <span class="keyword">prog</span>.py</span><br><span class="line">$ python <span class="keyword">prog</span>.py --<span class="keyword">help</span></span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [--verbosity VERBOSITY]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line"> -<span class="keyword">h</span>, --<span class="keyword">help</span>                      show this <span class="keyword">help</span> message and <span class="keyword">exit</span></span><br><span class="line"> --verbosity VERBOSITY</span><br><span class="line">                                 increase output verbosity</span><br><span class="line">$ python <span class="keyword">prog</span>.py --verbosity</span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [--verbosity VERBOSITY]</span><br><span class="line"><span class="keyword">prog</span>.py: <span class="keyword">error</span>: argument --verbosity: expected <span class="keyword">one</span> argument</span><br></pre></td></tr></table></figure></p>
<p>看看都发生了什么:</p>
<ul>
<li>这段代码是想在–verbosity被赋值的时候显示点什么, 没被赋值的时候什么都不显示.</li>
<li>所谓optional arguments, 取意译就是”选择性参数”. 我们可以看到当不使用–verbosity的时候是不会报错的. args.verbosity的值也是None</li>
<li>help信息也显示有点不一样. 加了[–verbosity VERSOSITY].</li>
<li>当我们使用–verbosity的时候, 就要给TA赋个值, 否则会报错.</li>
</ul>
<p>上面的例子可以接受任意的整数作为<code>--verbosity</code>的值, 但对我们这简单的小程序来说, 只有俩个值是有用的, True或者False. 我们改一下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"--verbose"</span>, help=<span class="string">"increase output verbosity"</span>,</span><br><span class="line">                    action=<span class="string">"store_true"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"verbosity turned on"</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">prog</span>.py --verbose</span><br><span class="line">verbosity turned <span class="keyword">on</span></span><br><span class="line">$ python <span class="keyword">prog</span>.py --verbose 1</span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [--verbose]</span><br><span class="line"><span class="keyword">prog</span>.py: <span class="keyword">error</span>: unrecognized arguments: 1</span><br><span class="line">$ python <span class="keyword">prog</span>.py --<span class="keyword">help</span></span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [--verbose]</span><br><span class="line"></span><br><span class="line">optional arguments: </span><br><span class="line">-<span class="keyword">h</span>, --<span class="keyword">help</span>      show this <span class="keyword">help</span> message and <span class="keyword">exit</span> </span><br><span class="line">--verbose       increase output verbosity</span><br></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li>这个选项现在不止是一个需要赋值的flag. 我们甚至给TA改了个名字.  我们还新指定了一个关键字, <code>action</code>. 同时吧TA赋值成<code>&quot;store_true&quot;</code>. 这么做的意思是, 如果使用<code>verbose</code>, 就把<code>True</code>赋值给<code>args.verbose</code>. 如果不使用, 就给TA赋<code>False</code>.</li>
<li>注意help text也发生了变化.</li>
</ul>
<h5 id="Short_options"><a href="#Short_options" class="headerlink" title="Short options"></a>Short options</h5><p>如果你经常用terminal命令行模式, 你就会发现我还没说short options. 实现起来其实非常简单.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                     action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'verbosity turned on'</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">prog</span>.py -v</span><br><span class="line">verbosity turned <span class="keyword">on</span></span><br><span class="line">$ python <span class="keyword">prog</span>.py --<span class="keyword">help</span></span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [-v]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">-<span class="keyword">h</span>, --<span class="keyword">help</span>   show this <span class="keyword">help</span> message and <span class="keyword">exit</span> </span><br><span class="line">-v, --verbose   increase output verbosity</span><br></pre></td></tr></table></figure></p>
<p>可以看到在help text里有对应的改变.</p>
<h5 id="u6DF7_u7528positional_u548Coptional_arguments"><a href="#u6DF7_u7528positional_u548Coptional_arguments" class="headerlink" title="混用positional和optional arguments"></a>混用positional和optional arguments</h5><p>让代码来的更复杂点吧:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'square'</span>, type=int,</span><br><span class="line">        help=<span class="string">'display a square of a given number'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">        help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'the square of &#123;&#125; equals &#123;&#125;'</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python prog<span class="class">.py</span></span><br><span class="line">usage: prog<span class="class">.py</span> [-h] [-v] square</span><br><span class="line">prog<span class="class">.py</span>: error: the following arguments are required: square</span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> --verbose</span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> --verbose <span class="number">4</span></span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>我们又把那个positional argument带回来了</li>
<li>注意, 赋值的顺序并没影响</li>
</ul>
<p>我们再把以前的verbosity也带回来:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int, help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int, help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>: </span><br><span class="line">        <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>: </span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line">$ python prog.py <span class="number">4</span> -v</span><br><span class="line">usage: prog.py [-h] [-v VERBOSITY] square</span><br><span class="line">prog.py: error: argument -v/--verbosity: expected one argument</span><br><span class="line">$ python prog.py <span class="number">4</span> -v <span class="number">1</span></span><br><span class="line"><span class="number">4</span>^<span class="number">2</span> == <span class="number">16</span></span><br><span class="line">$ python prog.py <span class="number">4</span> -v <span class="number">2</span></span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br><span class="line">$ python prog.py <span class="number">4</span> -v <span class="number">3</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<p>看起来都工作的挺好, 除了, 最后好像是有点bug. 我们来通过限定<code>--verbosity</code>来fix它:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int, </span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int, choices=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>: </span><br><span class="line">      <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">     <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">     <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py <span class="number">4</span> -v <span class="number">3</span></span><br><span class="line">usage: prog.py [-h] [-v &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;] square</span><br><span class="line">prog.py: error: argument -v/--verbosity: invalid choice: <span class="number">3</span> (choose from <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">$ python prog.py <span class="number">4</span> -h</span><br><span class="line">usage: prog.py [-h] [-v &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;] square</span><br><span class="line"></span><br><span class="line">positional arguments: </span><br><span class="line">    square           display a square of a given number</span><br><span class="line">optional arguments: </span><br><span class="line">    -h, --help      show <span class="keyword">this</span> help message and <span class="built_in">exit</span> </span><br><span class="line">    -v &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;, --verbosity &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">                           increase output verbosity</span><br></pre></td></tr></table></figure></p>
<p>可以看到在error message里也反应出我们的改变.<br>接下来, 我们来看下verbosity的另一种玩法, 这种玩法其实更常见, 更符合cpython使用参数的风格(试试python –verison):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int, </span><br><span class="line">        help=<span class="string">"display the square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, </span><br><span class="line">        help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>这回我们用了另一个action: “count”. 去统计一个optional argument的出现次数.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -v</span><br><span class="line"><span class="number">4</span>^<span class="number">2</span> == <span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -vv</span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> --verbosity --verbosity</span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -v <span class="number">1</span></span><br><span class="line">usage: prog<span class="class">.py</span> [-h] [-v] square</span><br><span class="line">prog<span class="class">.py</span>: error: unrecognized arguments: <span class="number">1</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -h</span><br><span class="line">usage: prog<span class="class">.py</span> [-h] [-v] square</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">     square     <span class="attribute">display</span> <span class="tag">a</span> square of <span class="tag">a</span> given number</span><br><span class="line"></span><br><span class="line">optional arguments: </span><br><span class="line">  -h, --help     show this help message and exit</span><br><span class="line">  -v, --verbosity   increase output verbosity</span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -vvv</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>跟前面的<code>&quot;store_true&quot;</code>一样, 如果不使用, 就会默认赋值为<code>&quot;None&quot;</code>.</li>
<li>这就是<code>action</code>为<code>&quot;count&quot;</code>的效果. 你们肯定也在其他程序中见过.</li>
<li>最后的输出还是看起来怪怪的.</li>
</ul>
<p>我们来fix一下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">       help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">       help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bugfix: replace == with &gt;=</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>来看看结果:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -vvv</span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span> -vvvv</span><br><span class="line">the square of <span class="number">4</span> equals <span class="number">16</span></span><br><span class="line">$ python prog<span class="class">.py</span> <span class="number">4</span></span><br><span class="line">Traceback (most recent call last): </span><br><span class="line">      File <span class="string">"prog.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">             <span class="keyword">if</span> args<span class="class">.verbosity</span> &gt;= <span class="number">2</span>:</span><br><span class="line">TypeError: unorderable types: <span class="function"><span class="title">NoneType</span><span class="params">()</span></span> &gt;= <span class="function"><span class="title">int</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>从前两个输出看起来工作的不错, fix了我们的bug.</li>
<li>但从最后一个输出看工作的不怎么理想啊…</li>
</ul>
<p>继续fix:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">       help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>,</span><br><span class="line">       action=<span class="string">"count"</span>, default=<span class="number">0</span>, help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>我们这里介绍了另一个keyword, <code>default</code>. 用了<code>default</code>就会把默认值设置成0. 一定要记住如果不给positional argument赋值, 默认的就会赋值为<code>None</code>. 是不能跟数字做比较的.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<p>目前介绍的功能已经能应付很多情况了. 在结束之前, 我们再来点更猛的吧.</p>
<h5 id="u66F4_u9AD8_u7EA7_u7684_u7528_u6CD5"><a href="#u66F4_u9AD8_u7EA7_u7684_u7528_u6CD5" class="headerlink" title="更高级的用法"></a>更高级的用法</h5><p>我们扩展一下这个例子, 来显示更多内容:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x ** args.y</span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Running '&#123;&#125;'"</span>.format(__file__)</span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">     <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">prog</span>.py</span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [-v] x <span class="literal">y</span></span><br><span class="line"><span class="keyword">prog</span>.py: <span class="keyword">error</span>: the following arguments are required: x, <span class="literal">y</span></span><br><span class="line">$ python <span class="keyword">prog</span>.py -<span class="literal">h</span></span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [-v] x <span class="literal">y</span></span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">     x     the base </span><br><span class="line">     y     the exponent</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">     -<span class="keyword">h</span>, --<span class="keyword">help</span>   show this <span class="keyword">help</span> message and <span class="keyword">exit</span></span><br><span class="line">     -v, --verbosity</span><br><span class="line">$ python <span class="keyword">prog</span>.py 4 2 -v</span><br><span class="line">4^2 == 16</span><br><span class="line">$ python <span class="keyword">prog</span>.py 4 2 -v</span><br><span class="line">4^2 == 16</span><br><span class="line">$ python <span class="keyword">prog</span>.py 4 2 -vv</span><br><span class="line">Running '<span class="keyword">prog</span>.py'</span><br><span class="line">4^2 == 16</span><br></pre></td></tr></table></figure></p>
<h5 id="u5904_u7406_u51B2_u7A81"><a href="#u5904_u7406_u51B2_u7A81" class="headerlink" title="处理冲突"></a>处理冲突</h5><p>我们在例子中加一个argument: <code>--quiet</code>. <code>quiet</code>表示如果不想用<code>verbose</code>的显示方式就用<code>quiet</code>. 它们是互斥的关系. 我们可以这么实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x ** args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">       <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span>^<span class="number">2</span> == <span class="number">16</span></span><br><span class="line">$ python prog.py <span class="number">4</span> <span class="number">2</span> -q</span><br><span class="line"><span class="number">16</span></span><br><span class="line">$ python prog.py <span class="number">4</span> <span class="number">2</span> -v</span><br><span class="line"><span class="number">4</span> to the power <span class="number">2</span> equals <span class="number">16</span></span><br><span class="line">$ python prog.py <span class="number">4</span> <span class="number">2</span> -vq</span><br><span class="line">usage: prog.py [-h] [-v | -q] x y</span><br><span class="line">prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span><br><span class="line">$ python prog.py <span class="number">4</span> <span class="number">2</span> -v --quiet</span><br><span class="line">usage: prog.py [-h] [-v | -q] x yprog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span><br></pre></td></tr></table></figure></p>
<p>最后, 如果你想告诉用户程序的主要目的. 可以这么来:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparseparser = argparse.ArgumentParser(description=<span class="string">"calculate X to the power of Y"</span>)</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x ** args.y</span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">       <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">prog</span>.py --<span class="keyword">help</span></span><br><span class="line">usage: <span class="keyword">prog</span>.py [-<span class="keyword">h</span>] [-v | -q] x <span class="literal">y</span></span><br><span class="line"></span><br><span class="line">calculate X to the power of <span class="literal">Y</span></span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">    x     the base </span><br><span class="line">    y     the exponent</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">    -<span class="keyword">h</span>, --<span class="keyword">help</span> s    how this <span class="keyword">help</span> message and <span class="keyword">exit</span></span><br><span class="line">    -v, --verbose -q, --quiet</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>经常用的模块, 也是老用老忘, 用一次学一次. 写篇blog, 加深印象. refer to: <a href="https://docs.python.org/2.7/howto/argparse.html#id1">python howto</a></p>
</blockquote>
<h5 id="argument_u548Cparameter_u7684_u533A_u522B_3A"><a href="#argument_u548Cparameter_u7684_u533A_u522B_3A" class="headerlink" title="argument和parameter的区别:"></a>argument和parameter的区别:</h5><p>其实跟今天的主题没多大关系, 顺便说一下, 因为看一些英文的技术文章, 会经常用这两个概念.<br>parameter就相当于java里的”形参”:<br><em>方法/函数定义时在括号里的参数</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">explain_param_vs_arg</span><span class="params">(param1, param2)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> param1, param2</span><br></pre></td></tr></table></figure></p>
<p>argument就是所谓”实参”:<br><em>调用方法/函数时括号里的参数</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain_param_vs_arg(<span class="string">"arg1"</span>, <span class="string">"arg2"</span>)</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="python argparse" scheme="http://yoursite.com/tags/python-argparse/"/>
    
      <category term="模块学习" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python调试:pdb基本用法(转)]]></title>
    <link href="http://yoursite.com/2016/01/07/python%E8%B0%83%E8%AF%95-pdb%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-%E8%BD%AC/"/>
    <id>http://yoursite.com/2016/01/07/python调试-pdb基本用法-转/</id>
    <published>2016-01-07T13:23:21.000Z</published>
    <updated>2016-01-07T13:35:39.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>转自<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/#icomments" target="_blank" rel="external">IBM开发者社区</a>。</p>
</blockquote>
<h3 id="u4F7F_u7528pdb_u8FDB_u884C_u8C03_u8BD5_uFF1A"><a href="#u4F7F_u7528pdb_u8FDB_u884C_u8C03_u8BD5_uFF1A" class="headerlink" title="使用pdb进行调试："></a>使用pdb进行调试：</h3><p>pdb 是 python 自带的一个包，为 python 程序提供了一种交互的源代码调试功能，主要特性包括设置断点、单步调试、进入函数调试、查看当前代码、查看栈片段、动态改变变量的值等。pdb 提供了一些常用的调试命令，详情见表 1。</p>
<ul>
<li>表 1. pdb 常用命令</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>break 或 b 设置断点</td>
<td>设置断点</td>
</tr>
<tr>
<td>continue 或 c</td>
<td>继续执行程序</td>
</tr>
<tr>
<td>list 或 l</td>
<td>查看当前行的代码段</td>
</tr>
<tr>
<td>step 或 s</td>
<td>进入函数</td>
</tr>
<tr>
<td>return 或 r</td>
<td>执行代码直到从当前函数返回</td>
</tr>
<tr>
<td>exit 或 q</td>
<td>中止并退出</td>
</tr>
<tr>
<td>next 或 n</td>
<td>执行下一行</td>
</tr>
<tr>
<td>pp</td>
<td>打印变量的值</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
</tbody>
</table>
<p>下面结合具体的实例讲述如何使用 pdb 进行调试。<br><a id="more"></a></p>
<h4 id="u6E05_u5355_1-__u6D4B_u8BD5_u4EE3_u7801_u793A_u4F8B"><a href="#u6E05_u5355_1-__u6D4B_u8BD5_u4EE3_u7801_u793A_u4F8B" class="headerlink" title="清单 1. 测试代码示例"></a>清单 1. 测试代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line">a = <span class="string">"aaa"</span></span><br><span class="line">pdb.set_trace() </span><br><span class="line">b = <span class="string">"bbb"</span></span><br><span class="line">c = <span class="string">"ccc"</span></span><br><span class="line">final = a + b + c </span><br><span class="line"><span class="keyword">print</span> final</span><br></pre></td></tr></table></figure>
<p>开始调试：直接运行脚本，会停留在 pdb.set_trace() 处，选择 n+enter 可以执行当前的 statement。在第一次按下了 n+enter 之后可以直接按 enter 表示重复执行上一条 debug 命令。</p>
<h4 id="u6E05_u5355_2-__u5229_u7528_pdb__u8C03_u8BD5"><a href="#u6E05_u5355_2-__u5229_u7528_pdb__u8C03_u8BD5" class="headerlink" title="清单 2. 利用 pdb 调试"></a>清单 2. 利用 pdb 调试</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]#  python epdb1.py </span><br><span class="line"> &gt; /root/epdb1.py(4)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(5)?() </span><br><span class="line"> -&gt; c = "ccc"</span><br><span class="line"> (Pdb) </span><br><span class="line"> &gt; /root/epdb1.py(6)?() </span><br><span class="line"> -&gt; final = a + b + c </span><br><span class="line"> (Pdb) list </span><br><span class="line">  1     import pdb </span><br><span class="line">  2     a = "aaa"</span><br><span class="line">  3     pdb.set_trace() </span><br><span class="line">  4     b = "bbb"</span><br><span class="line">  5     c = "ccc"</span><br><span class="line">  6  -&gt; final = a + b + c </span><br><span class="line">  7     print final </span><br><span class="line"> [EOF] </span><br><span class="line"> (Pdb) </span><br><span class="line"> [EOF] </span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(7)?() </span><br><span class="line"> -&gt; print final </span><br><span class="line"> (Pdb)</span><br></pre></td></tr></table></figure>
<p>退出 debug：使用 quit 或者 q 可以退出当前的 debug，但是 quit 会以一种非常粗鲁的方式退出程序，其结果是直接 crash。</p>
<h4 id="u6E05_u5355_3-__u9000_u51FA_debug"><a href="#u6E05_u5355_3-__u9000_u51FA_debug" class="headerlink" title="清单 3. 退出 debug"></a>清单 3. 退出 debug</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]#  python epdb1.py </span><br><span class="line"> &gt; /root/epdb1.py(4)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(5)?() </span><br><span class="line"> -&gt; c = "ccc"</span><br><span class="line"> (Pdb) q </span><br><span class="line"> Traceback (most recent call last): </span><br><span class="line">  File "epdb1.py", line 5, in ? </span><br><span class="line">    c = "ccc"</span><br><span class="line">  File "epdb1.py", line 5, in ? </span><br><span class="line">    c = "ccc"</span><br><span class="line">  File "/usr/lib64/python2.4/bdb.py", line 48, in trace_dispatch </span><br><span class="line">    return self.dispatch_line(frame) </span><br><span class="line">  File "/usr/lib64/python2.4/bdb.py", line 67, in dispatch_line </span><br><span class="line">    if self.quitting: raise BdbQuit </span><br><span class="line"> bdb.BdbQuit</span><br></pre></td></tr></table></figure>
<p>打印变量的值：如果需要在调试过程中打印变量的值，可以直接使用 p 加上变量名，但是需要注意的是打印仅仅在当前的 statement 已经被执行了之后才能看到具体的值，否则会报 NameError: &lt; exceptions.NameError … ….&gt; 错误。</p>
<h4 id="u6E05_u5355_4-_debug__u8FC7_u7A0B_u4E2D_u6253_u5370_u53D8_u91CF"><a href="#u6E05_u5355_4-_debug__u8FC7_u7A0B_u4E2D_u6253_u5370_u53D8_u91CF" class="headerlink" title="清单 4. debug 过程中打印变量"></a>清单 4. debug 过程中打印变量</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]#  python epdb1.py </span><br><span class="line"> &gt; /root/epdb1.py(4)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(5)?() </span><br><span class="line"> -&gt; c = "ccc"</span><br><span class="line"> (Pdb) p b </span><br><span class="line">'bbb'</span><br><span class="line"> (Pdb) </span><br><span class="line">'bbb'</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(6)?() </span><br><span class="line"> -&gt; final = a + b + c </span><br><span class="line"> (Pdb) p c </span><br><span class="line">'ccc'</span><br><span class="line"> (Pdb) p final </span><br><span class="line"> *** NameError: &lt;exceptions.NameError instance at 0x1551b710 &gt; </span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(7)?() </span><br><span class="line"> -&gt; print final </span><br><span class="line"> (Pdb) p final </span><br><span class="line">'aaabbbccc'</span><br><span class="line"> (Pdb)</span><br></pre></td></tr></table></figure>
<p>使用 c 可以停止当前的 debug 使程序继续执行。如果在下面的程序中继续有 set_statement() 的申明，则又会重新进入到 debug 的状态，读者可以在代码 print final 之前再加上 set_trace() 验证。</p>
<h4 id="u6E05_u5355_5-__u505C_u6B62_debug__u7EE7_u7EED_u6267_u884C_u7A0B_u5E8F"><a href="#u6E05_u5355_5-__u505C_u6B62_debug__u7EE7_u7EED_u6267_u884C_u7A0B_u5E8F" class="headerlink" title="清单 5. 停止 debug 继续执行程序"></a>清单 5. 停止 debug 继续执行程序</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]#  python epdb1.py </span><br><span class="line"> &gt; /root/epdb1.py(4)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb1.py(5)?() </span><br><span class="line"> -&gt; c = "ccc"</span><br><span class="line"> (Pdb) c </span><br><span class="line"> aaabbbccc</span><br></pre></td></tr></table></figure>
<p>显示代码：在 debug 的时候不一定能记住当前的代码块，如要要查看具体的代码块，则可以通过使用 list 或者 l 命令显示。list 会用箭头 -&gt; 指向当前 debug 的语句。</p>
<h4 id="u6E05_u5355_6-_debug__u8FC7_u7A0B_u4E2D_u663E_u793A_u4EE3_u7801"><a href="#u6E05_u5355_6-_debug__u8FC7_u7A0B_u4E2D_u663E_u793A_u4EE3_u7801" class="headerlink" title="清单 6. debug 过程中显示代码"></a>清单 6. debug 过程中显示代码</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]#  python epdb1.py </span><br><span class="line"> &gt; /root/epdb1.py(4)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) list </span><br><span class="line">  1     import pdb </span><br><span class="line">  2     a = "aaa"</span><br><span class="line">  3     pdb.set_trace() </span><br><span class="line">  4  -&gt; b = "bbb"</span><br><span class="line">  5     c = "ccc"</span><br><span class="line">  6     final = a + b + c </span><br><span class="line">  7     pdb.set_trace() </span><br><span class="line">  8     print final </span><br><span class="line"> [EOF] </span><br><span class="line"> (Pdb) c </span><br><span class="line"> &gt; /root/epdb1.py(8)?() </span><br><span class="line"> -&gt; print final </span><br><span class="line"> (Pdb) list </span><br><span class="line">  3     pdb.set_trace() </span><br><span class="line">  4     b = "bbb"</span><br><span class="line">  5     c = "ccc"</span><br><span class="line">  6     final = a + b + c </span><br><span class="line">  7     pdb.set_trace() </span><br><span class="line">  8  -&gt; print final </span><br><span class="line"> [EOF] </span><br><span class="line"> (Pdb)</span><br></pre></td></tr></table></figure>
<p>在使用函数的情况下进行 debug</p>
<h4 id="u6E05_u5355_7-__u4F7F_u7528_u51FD_u6570_u7684_u4F8B_u5B50"><a href="#u6E05_u5355_7-__u4F7F_u7528_u51FD_u6570_u7684_u4F8B_u5B50" class="headerlink" title="清单 7. 使用函数的例子"></a>清单 7. 使用函数的例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(s1,s2)</span>:</span>      <span class="comment"># define subroutine combine, which... </span></span><br><span class="line">    s3 = s1 + s2 + s1    <span class="comment"># sandwiches s2 between copies of s1, ... </span></span><br><span class="line">    s3 = <span class="string">'"'</span> + s3 +<span class="string">'"'</span>   <span class="comment"># encloses it in double quotes,... </span></span><br><span class="line">    <span class="keyword">return</span> s3            <span class="comment"># and returns it. </span></span><br><span class="line"> a = <span class="string">"aaa"</span></span><br><span class="line"> pdb.set_trace() </span><br><span class="line"> b = <span class="string">"bbb"</span></span><br><span class="line"> c = <span class="string">"ccc"</span></span><br><span class="line"> final = combine(a,b) </span><br><span class="line"> <span class="keyword">print</span> final</span><br></pre></td></tr></table></figure>
<p>如果直接使用 n 进行 debug 则到 final=combine(a,b) 这句的时候会将其当做普通的赋值语句处理，进入到 print final。如果想要对函数进行 debug 如何处理呢 ? 可以直接使用 s 进入函数块。函数里面的单步调试与上面的介绍类似。如果不想在函数里单步调试可以在断点处直接按 r 退出到调用的地方。</p>
<h4 id="u5BF9_u51FD_u6570_u8FDB_u884C_debug"><a href="#u5BF9_u51FD_u6570_u8FDB_u884C_debug" class="headerlink" title="对函数进行 debug"></a>对函数进行 debug</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]# python epdb2.py </span><br><span class="line"> &gt; /root/epdb2.py(10)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb2.py(11)?() </span><br><span class="line"> -&gt; c = "ccc"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb2.py(12)?() </span><br><span class="line"> -&gt; final = combine(a,b) </span><br><span class="line"> (Pdb) s </span><br><span class="line"> --Call-- </span><br><span class="line"> &gt; /root/epdb2.py(3)combine() </span><br><span class="line"> -&gt; def combine(s1,s2):      # define subroutine combine, which... </span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb2.py(4)combine() </span><br><span class="line"> -&gt; s3 = s1 + s2 + s1    # sandwiches s2 between copies of s1, ... </span><br><span class="line"> (Pdb) list </span><br><span class="line">  1     import pdb </span><br><span class="line">  2 </span><br><span class="line">  3     def combine(s1,s2):      # define subroutine combine, which... </span><br><span class="line">  4  -&gt;     s3 = s1 + s2 + s1    # sandwiches s2 between copies of s1, ... </span><br><span class="line">  5         s3 = '"' + s3 +'"'   # encloses it in double quotes,... </span><br><span class="line">  6         return s3            # and returns it. </span><br><span class="line">  7 </span><br><span class="line">  8     a = "aaa"</span><br><span class="line">  9     pdb.set_trace() </span><br><span class="line"> 10     b = "bbb"</span><br><span class="line"> 11     c = "ccc"</span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb2.py(5)combine() </span><br><span class="line"> -&gt; s3 = '"' + s3 +'"'   # encloses it in double quotes,... </span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb2.py(6)combine() </span><br><span class="line"> -&gt; return s3            # and returns it. </span><br><span class="line"> (Pdb) n </span><br><span class="line"> --Return-- </span><br><span class="line"> &gt; /root/epdb2.py(6)combine()-&gt;'"aaabbbaaa"'</span><br><span class="line"> -&gt; return s3            # and returns it. </span><br><span class="line"> (Pdb) n </span><br><span class="line"> &gt; /root/epdb2.py(13)?() </span><br><span class="line"> -&gt; print final </span><br><span class="line"> (Pdb)</span><br></pre></td></tr></table></figure>
<p>在调试的时候动态改变值 。在调试的时候可以动态改变变量的值，具体如下实例。需要注意的是下面有个错误，原因是 b 已经被赋值了，如果想重新改变 b 的赋值，则应该使用！ B。</p>
<h4 id="u6E05_u5355_9-__u5728_u8C03_u8BD5_u7684_u65F6_u5019_u52A8_u6001_u6539_u53D8_u503C"><a href="#u6E05_u5355_9-__u5728_u8C03_u8BD5_u7684_u65F6_u5019_u52A8_u6001_u6539_u53D8_u503C" class="headerlink" title="清单 9. 在调试的时候动态改变值"></a>清单 9. 在调试的时候动态改变值</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@rcc-pok-idg-2255 ~]# python epdb2.py </span><br><span class="line"> &gt; /root/epdb2.py(10)?() </span><br><span class="line"> -&gt; b = "bbb"</span><br><span class="line"> (Pdb) var = "1234"</span><br><span class="line"> (Pdb) b = "avfe"</span><br><span class="line"> *** The specified object '= "avfe"' is not a function </span><br><span class="line"> or was not found along sys.path. </span><br><span class="line"> (Pdb) !b="afdfd"</span><br><span class="line"> (Pdb)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>转自<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/#icomments">IBM开发者社区</a>。</p>
</blockquote>
<h3 id="u4F7F_u7528pdb_u8FDB_u884C_u8C03_u8BD5_uFF1A"><a href="#u4F7F_u7528pdb_u8FDB_u884C_u8C03_u8BD5_uFF1A" class="headerlink" title="使用pdb进行调试："></a>使用pdb进行调试：</h3><p>pdb 是 python 自带的一个包，为 python 程序提供了一种交互的源代码调试功能，主要特性包括设置断点、单步调试、进入函数调试、查看当前代码、查看栈片段、动态改变变量的值等。pdb 提供了一些常用的调试命令，详情见表 1。</p>
<ul>
<li>表 1. pdb 常用命令</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>break 或 b 设置断点</td>
<td>设置断点</td>
</tr>
<tr>
<td>continue 或 c</td>
<td>继续执行程序</td>
</tr>
<tr>
<td>list 或 l</td>
<td>查看当前行的代码段</td>
</tr>
<tr>
<td>step 或 s</td>
<td>进入函数</td>
</tr>
<tr>
<td>return 或 r</td>
<td>执行代码直到从当前函数返回</td>
</tr>
<tr>
<td>exit 或 q</td>
<td>中止并退出</td>
</tr>
<tr>
<td>next 或 n</td>
<td>执行下一行</td>
</tr>
<tr>
<td>pp</td>
<td>打印变量的值</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
</tbody>
</table>
<p>下面结合具体的实例讲述如何使用 pdb 进行调试。<br>]]>
    
    </summary>
    
      <category term="pdb" scheme="http://yoursite.com/tags/pdb/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python对json的处理（转）]]></title>
    <link href="http://yoursite.com/2016/01/04/python%E5%AF%B9json%E7%9A%84%E5%A4%84%E7%90%86%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2016/01/04/python对json的处理（转）/</id>
    <published>2016-01-04T12:10:15.000Z</published>
    <updated>2016-01-04T13:36:49.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>转载一篇非常好的介绍python对json处理的<a href="http://www.cnblogs.com/coser/archive/2011/12/14/2287739.html" target="_blank" rel="external">blog</a></p>
</blockquote>
<h5 id="u4EC0_u4E48_u662Fjson_uFF1A"><a href="#u4EC0_u4E48_u662Fjson_uFF1A" class="headerlink" title="什么是json："></a>什么是json：</h5><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。</p>
<h5 id="JSON_u5EFA_u6784_u4E8E_u4E24_u79CD_u7ED3_u6784_uFF1A"><a href="#JSON_u5EFA_u6784_u4E8E_u4E24_u79CD_u7ED3_u6784_uFF1A" class="headerlink" title="JSON建构于两种结构："></a>JSON建构于两种结构：</h5><p>“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。<br>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。<br>这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。</p>
<p>jso官方说明参见：<a href="http://json.org/" target="_blank" rel="external">http://json.org/</a></p>
<p>Python操作json的标准api库参考：<a href="http://docs.python.org/library/json.html" target="_blank" rel="external">http://docs.python.org/library/json.html</a><br><a id="more"></a></p>
<h5 id="u5BF9_u7B80_u5355_u6570_u636E_u7C7B_u578B_u7684encoding__u548C_decoding_uFF1A"><a href="#u5BF9_u7B80_u5355_u6570_u636E_u7C7B_u578B_u7684encoding__u548C_decoding_uFF1A" class="headerlink" title="对简单数据类型的encoding 和 decoding："></a>对简单数据类型的encoding 和 decoding：</h5><h6 id="encoding_3A"><a href="#encoding_3A" class="headerlink" title="encoding:"></a>encoding:</h6><p>使用简单的json.dumps方法对简单数据类型进行编码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">123</span>,<span class="number">123.123</span>,<span class="string">'abc'</span>,&#123;<span class="string">'key1'</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="string">'key2'</span>:(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)&#125;]</span><br><span class="line">encodedjson = json.dumps(obj)</span><br><span class="line"><span class="keyword">print</span> repr(obj)</span><br><span class="line"><span class="keyword">print</span> encodedjson</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="list">[<span class="keyword">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">123</span>, <span class="number">123.123</span>, <span class="variable">'abc</span>', &#123;<span class="variable">'key2</span><span class="variable">':</span> <span class="list">(<span class="keyword">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span>, <span class="variable">'key1</span><span class="variable">':</span> <span class="list">(<span class="keyword">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span>&#125;] </span><br><span class="line"><span class="list">[<span class="list">[<span class="keyword">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">123</span>, <span class="number">123.123</span>, <span class="string">"abc"</span>, &#123;<span class="string">"key2"</span>: <span class="list">[<span class="keyword">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">"key1"</span>: <span class="list">[<span class="keyword">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;]</span></span></span></span></span></span></span><br></pre></td></tr></table></figure></p>
<p>通过输出的结果可以看出，简单类型通过encode之后跟其原始的repr()输出结果非常相似，但是有些数据类型进行了改变，例如上例中的元组则转换为了列表。在json的编码过程中，会存在从python原始类型向json类型的转化过程，具体的转化对照如下：<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/pytojson.png" alt=""></p>
<h6 id="decoding_3A"><a href="#decoding_3A" class="headerlink" title="decoding:"></a>decoding:</h6><p>json.dumps()方法返回了一个str对象encodedjson，我们接下来在对encodedjson进行decode，得到原始数据，需要使用的json.loads()函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">decodejson = json.loads(encodedjson)</span><br><span class="line"><span class="keyword">print</span> type(decodejson)</span><br><span class="line"><span class="keyword">print</span> decodejson[<span class="number">4</span>][<span class="string">'key1'</span>]</span><br><span class="line"><span class="keyword">print</span> decodejson</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;type <span class="string">'list'</span>&gt; </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">123</span>, <span class="number">123.123</span>, <span class="string">u'abc'</span>, &#123;<span class="string">u'key2'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">u'key1'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;]</span><br></pre></td></tr></table></figure></p>
<p>loads方法返回了原始的对象，但是仍然发生了一些数据类型的转化。比如，上例中‘abc’转化为了unicode类型。从json到python的类型转化对照如下：<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/jsontopy.png" alt=""></p>
<h6 id="dumps_28_29_u53C2_u6570_u8BF4_u660E_uFF1A"><a href="#dumps_28_29_u53C2_u6570_u8BF4_u660E_uFF1A" class="headerlink" title="dumps()参数说明："></a>dumps()参数说明：</h6><ul>
<li>sort_keys<br>json.dumps方法提供了很多好用的参数可供选择，比较常用的有sort_keys（对dict对象进行排序，我们知道默认dict是无序存放的），separators，indent等参数。<br>排序功能使得存储的数据更加有利于观察，也使得对json输出的对象进行比较，例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data1 = &#123;<span class="string">'b'</span>:<span class="number">789</span>,<span class="string">'c'</span>:<span class="number">456</span>,<span class="string">'a'</span>:<span class="number">123</span>&#125;</span><br><span class="line">data2 = &#123;<span class="string">'a'</span>:<span class="number">123</span>,<span class="string">'b'</span>:<span class="number">789</span>,<span class="string">'c'</span>:<span class="number">456</span>&#125;</span><br><span class="line">d1 = json.dumps(data1,sort_keys=<span class="keyword">True</span>)</span><br><span class="line">d2 = json.dumps(data2)</span><br><span class="line">d3 = json.dumps(data2,sort_keys=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> d1</span><br><span class="line"><span class="keyword">print</span> d2</span><br><span class="line"><span class="keyword">print</span> d3</span><br><span class="line"><span class="keyword">print</span> d1==d2</span><br><span class="line"><span class="keyword">print</span> d1==d3</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"a"</span>: <span class="number">123</span>, <span class="string">"b"</span>: <span class="number">789</span>, <span class="string">"c"</span>: <span class="number">456</span>&#125; </span><br><span class="line">&#123;<span class="string">"a"</span>: <span class="number">123</span>, <span class="string">"c"</span>: <span class="number">456</span>, <span class="string">"b"</span>: <span class="number">789</span>&#125; </span><br><span class="line">&#123;<span class="string">"a"</span>: <span class="number">123</span>, <span class="string">"b"</span>: <span class="number">789</span>, <span class="string">"c"</span>: <span class="number">456</span>&#125; </span><br><span class="line">False </span><br><span class="line">True</span><br></pre></td></tr></table></figure></p>
<p>上例中，本来data1和data2数据应该是一样的，但是由于dict存储的无序特性，造成两者无法比较。因此两者可以通过排序后的结果进行存储就避免了数据比较不一致的情况发生，但是排序后再进行存储，系统必定要多做一些事情，也一定会因此造成一定的性能消耗，所以适当排序是很重要的。</p>
<ul>
<li>indent<br>indent参数是缩进的意思，它可以使得数据存储的格式变得更加优雅。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data1 = &#123;<span class="string">'b'</span>:<span class="number">789</span>,<span class="string">'c'</span>:<span class="number">456</span>,<span class="string">'a'</span>:<span class="number">123</span>&#125;</span><br><span class="line">d1 = json.dumps(data1,sort_keys=<span class="keyword">True</span>,indent=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> d1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    "<span class="attribute">a</span>": <span class="value"><span class="number">123</span></span>, </span><br><span class="line">    "<span class="attribute">b</span>": <span class="value"><span class="number">789</span></span>, </span><br><span class="line">    "<span class="attribute">c</span>": <span class="value"><span class="number">456</span> </span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>separator<br>输出的数据被格式化之后，变得可读性更强，但是却是通过增加一些冗余的空白格来进行填充的。json主要是作为一种数据通信的格式存在的，而网络通信是很在乎数据的大小的，无用的空格会占据很多通信带宽，所以适当时候也要对数据进行压缩。separator参数可以起到这样的作用，该参数传递是一个元组，包含分割对象的字符串。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'DATA:'</span>, repr(data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'repr(data)             :'</span>, len(repr(data))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'dumps(data)            :'</span>, len(json.dumps(data))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'dumps(data, indent=2)  :'</span>, len(json.dumps(data, indent=<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'dumps(data, separators):'</span>, len(json.dumps(data, separators=(<span class="string">','</span>,<span class="string">':'</span>)))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATA: &#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'c'</span>: <span class="number">456</span>, <span class="string">'b'</span>: <span class="number">789</span>&#125; </span><br><span class="line">repr(data)             : <span class="number">30</span> </span><br><span class="line">dumps(data)            : <span class="number">30</span> </span><br><span class="line">dumps(data, indent=<span class="number">2</span>)  : <span class="number">46</span> </span><br><span class="line">dumps(data, separators): <span class="number">25</span></span><br></pre></td></tr></table></figure></p>
<p>通过移除多余的空白符，达到了压缩数据的目的，而且效果还是比较明显的。</p>
<ul>
<li>skipkeys<br>另一个比较有用的dumps参数是skipkeys，默认为False。 dumps方法存储dict对象时，key必须是str类型，如果出现了其他类型的话，那么会产生TypeError异常，如果开启该参数，设为True的话，则会比较优雅的过度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'b'</span>:<span class="number">789</span>,<span class="string">'c'</span>:<span class="number">456</span>,(<span class="number">1</span>,<span class="number">2</span>):<span class="number">123</span>&#125;</span><br><span class="line"><span class="keyword">print</span> json.dumps(data,skipkeys=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>输出：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">c</span>": <span class="value"><span class="number">456</span></span>, "<span class="attribute">b</span>": <span class="value"><span class="number">789</span></span>&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="u5904_u7406_u81EA_u5DF1_u7684_u6570_u636E_u7C7B_u578B"><a href="#u5904_u7406_u81EA_u5DF1_u7684_u6570_u636E_u7C7B_u578B" class="headerlink" title="处理自己的数据类型"></a>处理自己的数据类型</h5><p>json模块不仅可以处理普通的python内置类型，也可以处理我们自定义的数据类型，而往往处理自定义的对象是很常用的。</p>
<p>首先，我们定义一个类Person。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Person Object name : %s , age : %d'</span> % (self.name,self.age)</span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Person(<span class="string">'Peter'</span>,<span class="number">22</span>)</span><br><span class="line">    <span class="keyword">print</span> p</span><br></pre></td></tr></table></figure></p>
<p>如果直接通过json.dumps方法对Person的实例进行处理的话，会报错，因为json无法支持这样的自动转化。通过上面所提到的json和python的类型转化对照表，可以发现，object类型是和dict相关联的，所以我们需要把我们自定义的类型转化为dict，然后再进行处理。这里，有两种方法可以使用。</p>
<h6 id="u65B9_u6CD5_u4E00_uFF1A_u81EA_u5DF1_u5199_u8F6C_u5316_u51FD_u6570"><a href="#u65B9_u6CD5_u4E00_uFF1A_u81EA_u5DF1_u5199_u8F6C_u5316_u51FD_u6570" class="headerlink" title="方法一：自己写转化函数"></a>方法一：自己写转化函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span><br><span class="line">Created on 2011-12-14</span><br><span class="line">@author: Peter</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">p = Person.Person(<span class="string">'Peter'</span>,<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object2dict</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="comment">#convert object to a dict</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    d[<span class="string">'__class__'</span>] = obj.__class__.__name__</span><br><span class="line">    d[<span class="string">'__module__'</span>] = obj.__module__</span><br><span class="line">    d.update(obj.__dict__)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2object</span><span class="params">(d)</span>:</span></span><br><span class="line">    <span class="comment">#convert dict to object</span></span><br><span class="line">    <span class="keyword">if</span><span class="string">'__class__'</span> <span class="keyword">in</span> d:</span><br><span class="line">        class_name = d.pop(<span class="string">'__class__'</span>)</span><br><span class="line">        module_name = d.pop(<span class="string">'__module__'</span>)</span><br><span class="line">        module = __import__(module_name)</span><br><span class="line">        class_ = getattr(module,class_name)</span><br><span class="line">        args = dict((key.encode(<span class="string">'ascii'</span>), value) <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items()) <span class="comment">#get args</span></span><br><span class="line">        inst = class_(**args) <span class="comment">#create new instance</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        inst = d</span><br><span class="line">    <span class="keyword">return</span> inst</span><br><span class="line"></span><br><span class="line">d = object2dict(p)</span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line"><span class="comment">#&#123;'age': 22, '__module__': 'Person', '__class__': 'Person', 'name': 'Peter'&#125;</span></span><br><span class="line"></span><br><span class="line">o = dict2object(d)</span><br><span class="line"><span class="keyword">print</span> type(o),o</span><br><span class="line"><span class="comment">#&lt;class 'Person.Person'&gt; Person Object name : Peter , age : 22</span></span><br><span class="line"></span><br><span class="line">dump = json.dumps(p,default=object2dict)</span><br><span class="line"><span class="keyword">print</span> dump</span><br><span class="line"><span class="comment">#&#123;"age": 22, "__module__": "Person", "__class__": "Person", "name": "Peter"&#125;</span></span><br><span class="line"></span><br><span class="line">load = json.loads(dump,object_hook = dict2object)</span><br><span class="line"><span class="keyword">print</span> load</span><br><span class="line"><span class="comment">#Person Object name : Peter , age : 22</span></span><br></pre></td></tr></table></figure>
<p>上面代码已经写的很清楚了，实质就是自定义object类型和dict类型进行转化。object2dict函数将对象模块名、类名以及<strong>dict</strong>存储在dict对象里，并返回。dict2object函数则是反解出模块名、类名、参数，创建新的对象并返回。在json.dumps 方法中增加default参数，该参数表示在转化过程中调用指定的函数，同样在decode过程中json.loads方法增加object_hook,指定转化函数。</p>
<h6 id="u65B9_u6CD5_u4E8C_uFF1A_u7EE7_u627FJSONEncoder_u548CJSONDecoder_u7C7B_uFF0C_u8986_u5199_u76F8_u5173_u65B9_u6CD5"><a href="#u65B9_u6CD5_u4E8C_uFF1A_u7EE7_u627FJSONEncoder_u548CJSONDecoder_u7C7B_uFF0C_u8986_u5199_u76F8_u5173_u65B9_u6CD5" class="headerlink" title="方法二：继承JSONEncoder和JSONDecoder类，覆写相关方法"></a>方法二：继承JSONEncoder和JSONDecoder类，覆写相关方法</h6><p>JSONEncoder类负责编码，主要是通过其default函数进行转化，我们可以override该方法。同理对于JSONDecoder。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span><br><span class="line">Created on 2011-12-14</span><br><span class="line">@author: Peter</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">p = Person.Person(<span class="string">'Peter'</span>,<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="comment">#convert object to a dict</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        d[<span class="string">'__class__'</span>] = obj.__class__.__name__</span><br><span class="line">        d[<span class="string">'__module__'</span>] = obj.__module__</span><br><span class="line">        d.update(obj.__dict__)</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoder</span><span class="params">(json.JSONDecoder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        json.JSONDecoder.__init__(self,object_hook=self.dict2object)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dict2object</span><span class="params">(self,d)</span>:</span></span><br><span class="line">        <span class="comment">#convert dict to object</span></span><br><span class="line">        <span class="keyword">if</span><span class="string">'__class__'</span> <span class="keyword">in</span> d:</span><br><span class="line">            class_name = d.pop(<span class="string">'__class__'</span>)</span><br><span class="line">            module_name = d.pop(<span class="string">'__module__'</span>)</span><br><span class="line">            module = __import__(module_name)</span><br><span class="line">            class_ = getattr(module,class_name)</span><br><span class="line">            args = dict((key.encode(<span class="string">'ascii'</span>), value) <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items()) <span class="comment">#get args</span></span><br><span class="line">            inst = class_(**args) <span class="comment">#create new instance</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inst = d</span><br><span class="line">        <span class="keyword">return</span> inst</span><br><span class="line"></span><br><span class="line">d = MyEncoder().encode(p)</span><br><span class="line">o =  MyDecoder().decode(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line"><span class="keyword">print</span> type(o), o</span><br></pre></td></tr></table></figure></p>
<p>对于JSONDecoder类方法，稍微有点不同，但是改写起来也不是很麻烦。看代码应该就比较清楚了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>转载一篇非常好的介绍python对json处理的<a href="http://www.cnblogs.com/coser/archive/2011/12/14/2287739.html">blog</a></p>
</blockquote>
<h5 id="u4EC0_u4E48_u662Fjson_uFF1A"><a href="#u4EC0_u4E48_u662Fjson_uFF1A" class="headerlink" title="什么是json："></a>什么是json：</h5><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。</p>
<h5 id="JSON_u5EFA_u6784_u4E8E_u4E24_u79CD_u7ED3_u6784_uFF1A"><a href="#JSON_u5EFA_u6784_u4E8E_u4E24_u79CD_u7ED3_u6784_uFF1A" class="headerlink" title="JSON建构于两种结构："></a>JSON建构于两种结构：</h5><p>“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。<br>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。<br>这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。</p>
<p>jso官方说明参见：<a href="http://json.org/">http://json.org/</a></p>
<p>Python操作json的标准api库参考：<a href="http://docs.python.org/library/json.html">http://docs.python.org/library/json.html</a><br>]]>
    
    </summary>
    
      <category term="python json" scheme="http://yoursite.com/tags/python-json/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的vim配置]]></title>
    <link href="http://yoursite.com/2016/01/02/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/01/02/我的vim配置/</id>
    <published>2016-01-02T06:25:54.000Z</published>
    <updated>2016-01-02T06:44:25.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>主要是适配python开发. 都是些github star超高之作.</p>
</blockquote>
<h3 id="u9996_u5148_2C_u7528vundle_u6765_u7BA1_u7406_u63D2_u4EF6_3A"><a href="#u9996_u5148_2C_u7528vundle_u6765_u7BA1_u7406_u63D2_u4EF6_3A" class="headerlink" title="首先,用vundle来管理插件:"></a>首先,用vundle来管理插件:</h3><p><strong> github stars: 10,272 </strong><br> 地址: <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">github/vundle</a></p>
<h3 id="u6211_u7684vundle_list_3A"><a href="#u6211_u7684vundle_list_3A" class="headerlink" title="我的vundle list:"></a>我的vundle list:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">" The following are examples of different formats supported.</span><br><span class="line"> " Keep Plugin commands between vundle#<span class="operator"><span class="keyword">begin</span>/<span class="keyword">end</span>.</span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'tmhedberg/SimpylFold'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'scrooloose/syntastic'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'nvie/vim-flake8'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'altercation/vim-colors-solarized'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'scrooloose/nerdtree'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'jistr/vim-nerdtree-tabs'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'Lokaltog/powerline'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'powerline/bindings/vim/'</span>&#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="u6700_u96BE_u6298_u817E_u7684_3AYouCompleteMe"><a href="#u6700_u96BE_u6298_u817E_u7684_3AYouCompleteMe" class="headerlink" title="最难折腾的:YouCompleteMe"></a>最难折腾的:<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a></h4><p><strong> github stars: 9,475 </strong><br>需要编译后才能用, 还有几个依赖要装. 在mac上还必须得装macvim, 如果自己编译过python的话, 更是无数多坑. 当初我为TA折腾了整两天… 不过很值得,最好的自动补全,几乎支持所有语言.<br>效果:<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-02%20%E4%B8%8B%E5%8D%881.28.59.png" alt=""></p>
<h4 id="u7092_u9E21_u7B80_u5355_u7684_u6298_u53E0_3A_SimplyFold"><a href="#u7092_u9E21_u7B80_u5355_u7684_u6298_u53E0_3A_SimplyFold" class="headerlink" title="炒鸡简单的折叠: SimplyFold"></a>炒鸡简单的折叠: <a href="https://github.com/tmhedberg/SimpylFold" target="_blank" rel="external">SimplyFold</a></h4><p><strong> github stars: 102 </strong><br>可以在vimrc里把空格热键成ZA:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" Enable folding with the spacebar</span><br><span class="line"></span> <span class="keyword">nnoremap</span> &lt;space&gt; za</span><br></pre></td></tr></table></figure></p>
<p>效果:<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-02%20%E4%B8%8B%E5%8D%881.37.07.png" alt=""></p>
<h4 id="u9759_u6001_u8BED_u6CD5_u68C0_u67E5_3A_syntastic"><a href="#u9759_u6001_u8BED_u6CD5_u68C0_u67E5_3A_syntastic" class="headerlink" title="静态语法检查: syntastic"></a>静态语法检查: <a href="https://github.com/scrooloose/syntastic" target="_blank" rel="external">syntastic</a></h4><p><strong> github star: 5,951</strong><br>效果:<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-02%20%E4%B8%8B%E5%8D%881.45.02.png" alt=""></p>
<h4 id="pep8_u68C0_u67E5_3A_vim-flake8"><a href="#pep8_u68C0_u67E5_3A_vim-flake8" class="headerlink" title="pep8检查: vim-flake8"></a>pep8检查: <a href="https://github.com/nvie/vim-flake8" target="_blank" rel="external">vim-flake8</a></h4><p><strong> github stars: 418</strong><br>我是个重度pep8强迫症患者, 这绝逼是治疗我的神器…<br>得先装flake8第三方库:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> flake8</span><br></pre></td></tr></table></figure></p>
<p>效果:<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-02%20%E4%B8%8B%E5%8D%881.53.52.png" alt=""></p>
<h4 id="u6811_u72B6_u5BFC_u822A_3A_nerdtree"><a href="#u6811_u72B6_u5BFC_u822A_3A_nerdtree" class="headerlink" title="树状导航: nerdtree"></a>树状导航: <a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">nerdtree</a></h4><p><strong> github stars: 5,667</strong></p>
<blockquote>
<p>多tab的nerdtree支持: <a href="https://github.com/jistr/vim-nerdtree-tabs" target="_blank" rel="external">vim-nerdtree-tabs</a></p>
</blockquote>
<p>有了TA, vim瞬间提高不止一个bigger…<br>效果:<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-02%20%E4%B8%8B%E5%8D%881.57.11.png" alt=""></p>
<h4 id="u9707_u64BC_u7684powerline_3A_powerline"><a href="#u9707_u64BC_u7684powerline_3A_powerline" class="headerlink" title="震撼的powerline: powerline"></a>震撼的powerline: <a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">powerline</a></h4><p><strong> github stars: 2,640</strong><br>效果:<br><img src="http://7xppkp.com1.z0.glb.clouddn.com/screenshot.png" alt=""></p>
<p>最后再贴上我的<a href="https://github.com/Edward-f0cus/study" target="_blank" rel="external">.vimrc</a>, 欢迎试用.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>主要是适配python开发. 都是些github star超高之作.</p>
</blockquote>
<h3 id="u9996_u5148_2C_u7528vundle_u6765_u7BA1_u7406_u63D2_u4EF6_3A"><a href="#u9996_u5148_2C_u7528vundle_u6765_u7BA1_u7406_u63D2_u4EF6_3A" class="headerlink" title="首先,用vundle来管理插件:"></a>首先,用vundle来管理插件:</h3><p><strong> github stars: 10,272 </strong><br> 地址: <a href="https://github.com/VundleVim/Vundle.vim">github/vundle</a></p>
<h3 id="u6211_u7684vundle_list_3A"><a href="#u6211_u7684vundle_list_3A" class="headerlink" title="我的vundle list:"></a>我的vundle list:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">" The following are examples of different formats supported.</span><br><span class="line"> " Keep Plugin commands between vundle#<span class="operator"><span class="keyword">begin</span>/<span class="keyword">end</span>.</span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'tmhedberg/SimpylFold'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'scrooloose/syntastic'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'nvie/vim-flake8'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'altercation/vim-colors-solarized'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'scrooloose/nerdtree'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'jistr/vim-nerdtree-tabs'</span></span><br><span class="line"> <span class="keyword">Plugin</span> <span class="string">'Lokaltog/powerline'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'powerline/bindings/vim/'</span>&#125;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="python ide" scheme="http://yoursite.com/tags/python-ide/"/>
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="to be a geek" scheme="http://yoursite.com/categories/to-be-a-geek/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python的装饰器: decorator]]></title>
    <link href="http://yoursite.com/2015/12/23/python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8-decorator/"/>
    <id>http://yoursite.com/2015/12/23/python的装饰器-decorator/</id>
    <published>2015-12-23T05:09:39.000Z</published>
    <updated>2015-12-27T05:58:16.000Z</updated>
    <content type="html"><![CDATA[<p><strong> 本质上来说, 就是闭包加python的一个语法糖.</strong><br>亲们,让我们从头说起:</p>
<h5 id="python_u4E2D_u4E00_u5207_u7686_u5BF9_u8C61_2C_u65B9_u6CD5_u4E5F_u662F_u4E00_u4E2A_u5BF9_u8C61"><a href="#python_u4E2D_u4E00_u5207_u7686_u5BF9_u8C61_2C_u65B9_u6CD5_u4E5F_u662F_u4E00_u4E2A_u5BF9_u8C61" class="headerlink" title="python中一切皆对象,方法也是一个对象."></a>python中一切皆对象,方法也是一个对象.</h5>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line">isinstance(foo, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<p>所以TA可以被作为方法的形参传进去, 也可以作为return value被return.<br>我们先记下这一点, 后面会详细说明.</p>
<a id="more"></a>
<h5 id="u5185_u5D4C_u65B9_u6CD5_28nested_function_29_3A"><a href="#u5185_u5D4C_u65B9_u6CD5_28nested_function_29_3A" class="headerlink" title="内嵌方法(nested function):"></a>内嵌方法(nested function):</h5><p>python允许在方法内部定义一个方法, 内部方法可以引用操作外部方法的变量.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    para = <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'this is outer func'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'this is inner func'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'outer para in inner is %s'</span> % para</span><br><span class="line">        <span class="keyword">return</span> para</span><br><span class="line">    <span class="keyword">return</span> inner()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">print</span> outer()</span><br><span class="line"> <span class="keyword">print</span> para</span><br></pre></td></tr></table></figure></p>
<p>输出如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> outer func</span><br><span class="line">this <span class="keyword">is</span> inner func</span><br><span class="line">outer para <span class="keyword">in</span> inner <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">NameError: name <span class="string">'para'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<p>一个方法内部变量的生命周期, 应该是在执行这个方法时被define, 方法执行完毕后被delete. 在这个例子里print outer()之后, para必定不能再被使用, 如果再加一个print para, 必定会报错. okay, 目前为止, 一切都是按我们预想的来, 看起来也很好理解.</p>
<h5 id="u95ED_u5305_uFF08closures_29"><a href="#u95ED_u5305_uFF08closures_29" class="headerlink" title="闭包（closures)"></a>闭包（closures)</h5><p>我们把上面的例子稍微改一改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span> </span><br><span class="line">      para = <span class="number">1</span> </span><br><span class="line">      <span class="keyword">print</span> <span class="string">'this is outer func'</span> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </span><br><span class="line">              <span class="keyword">print</span> <span class="string">'this is inner func'</span> </span><br><span class="line">              <span class="keyword">print</span> <span class="string">'outer para in inner is %s'</span> % para</span><br><span class="line">              <span class="keyword">return</span> para</span><br><span class="line">      <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">closure = outer()</span><br></pre></td></tr></table></figure></p>
<p>输出如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> outer func</span><br></pre></td></tr></table></figure>
<p>这次我们把outer()的返回值改成inner这个方法本身。是不是看起来有点怪怪的？前面已经提到，方法在python里本身也是一个对象，so， why not？<br>从输出可以看出，调用outer()之后，inner方法并没有被执行。这也是好理解的。在python中，“()”是调用操作符，既然outer返回的是inner而不是inner()，说明inner就没有被call，所以它没有执行。cool，到这里虽然看起来有些复杂，但还是在比较好理解的范围之内。<br>我们继续：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> closure()</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> inner func</span><br><span class="line">outer para <span class="keyword">in</span> inner <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>这个是不是就有点难理解了？outer方法已经被执行完了，那么para的生命周期已经结束，inner怎么还可以用它？不报错？<br><strong> 这就是python对闭包的支持。</strong><br>如果我们dir一个方法(dir(closure))，会看到有func_closure这么一个内置的属性。如果此方法是一个闭包，那就会把闭包里用到的对象塞到这个属性里。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> closure.func_closure</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;cell <span class="preprocessor">at</span> <span class="number">0x7f42d46dd280</span>: <span class="keyword">int</span> object <span class="preprocessor">at</span> <span class="number">0x16cd158</span>&gt;,)</span><br></pre></td></tr></table></figure></p>
<p>这个int对象就是我们例子里可爱的para.</p>
<h5 id="u88C5_u9970_u5668_uFF08decorator_uFF09_3A"><a href="#u88C5_u9970_u5668_uFF08decorator_uFF09_3A" class="headerlink" title="装饰器（decorator）:"></a>装饰器（decorator）:</h5><p>升级一下上个例子， 给outer改个名字，同时传个参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decor</span><span class="params">(func)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">'this is func decor'</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'this is inner func'</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'call func in inner.'</span></span><br><span class="line">                 func()</span><br><span class="line">       <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line">foo = decor(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> func decor</span><br><span class="line">this <span class="keyword">is</span> inner func</span><br><span class="line">call func <span class="keyword">in</span> inner.</span><br><span class="line">this <span class="keyword">is</span> func foo</span><br></pre></td></tr></table></figure></p>
<p>改名之后的方法叫decor，加了个参数func。把decor(foo)重新赋值给foo, 并执行foo。<br>结果是原有的foo被执行，还有我们的inner。是不是很酷，相当于给foo加了个包装(wrapper)。<br>我们离胜利仅剩一步！<br>@这个符号是python对闭包采用的一个语法糖（syntax suger）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decor</span><span class="params">(func)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">'this is func decor'</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'this is inner func'</span></span><br><span class="line">                 <span class="keyword">print</span> <span class="string">'call func in inner.'</span></span><br><span class="line">                 func()</span><br><span class="line">       <span class="keyword">return</span> inner</span><br><span class="line"><span class="decorator">@decor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">         <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># foo = decor(foo)</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p>
<p>一样的输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> func decor</span><br><span class="line">this <span class="keyword">is</span> inner func</span><br><span class="line">call func <span class="keyword">in</span> inner.</span><br><span class="line">this <span class="keyword">is</span> func foo</span><br></pre></td></tr></table></figure></p>
<p>用了@语法糖，就相当于去掉了foo = decor(foo)这一步，让代码看起来更优雅，更readable。<br>That’s it。这就是装饰器。<br>如需转载， 请注明出处！谢谢</p>
<blockquote>
<p>还可以用class来做装饰器，请参考：<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808" target="_blank" rel="external">class decorator</a><br>也可以给装饰器传参数，请参考：<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845" target="_blank" rel="external">decorator with arguments</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong> 本质上来说, 就是闭包加python的一个语法糖.</strong><br>亲们,让我们从头说起:</p>
<h5 id="python_u4E2D_u4E00_u5207_u7686_u5BF9_u8C61_2C_u65B9_u6CD5_u4E5F_u662F_u4E00_u4E2A_u5BF9_u8C61"><a href="#python_u4E2D_u4E00_u5207_u7686_u5BF9_u8C61_2C_u65B9_u6CD5_u4E5F_u662F_u4E00_u4E2A_u5BF9_u8C61" class="headerlink" title="python中一切皆对象,方法也是一个对象."></a>python中一切皆对象,方法也是一个对象.</h5>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">'this is func foo'</span></span><br><span class="line"></span><br><span class="line">isinstance(foo, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<p>所以TA可以被作为方法的形参传进去, 也可以作为return value被return.<br>我们先记下这一点, 后面会详细说明.</p>]]>
    
    </summary>
    
      <category term="装饰器" scheme="http://yoursite.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux中的uniq]]></title>
    <link href="http://yoursite.com/2015/11/03/linux%E4%B8%AD%E7%9A%84uniq/"/>
    <id>http://yoursite.com/2015/11/03/linux中的uniq/</id>
    <published>2015-11-03T05:18:45.000Z</published>
    <updated>2015-12-27T05:56:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>昨天有个同事谈到一个笔试题:<br>  <em>用shell在一个文件中找出出现次数top50的50个单词, 前提是在这个文件中每行只有一个单词.</em><br>我们几个讨论了一下, 第一感觉都是用最熟悉的grep, 但要实现起来怕是得很多代码. 晚上回家没事瞎逛, 看到网友在某篇技术博客里提到uniq命令, 以前竟然不知道这个command, 请原谅我的无知…我搜了下用法, 让我立刻意识到这个笔试题可以秒答…</p>
</blockquote>
<h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>顾名思义, 这个command就是要列出不重复的项(使唯一). 以前一直感觉shell没有set这个数据类型很不方便, 现在完全可以用此命令来弥补了. 需要注意的是: <strong>uniq只比较相邻两项, 也就是说隔行的重复, TA是不care的. 这个时候就需要配合sort命令.</strong><br>参数如下:<br> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="keyword">u</span>:  列出若干唯一项. 应该<span class="keyword">u</span>是取得uniq的意思.</span><br><span class="line">-<span class="keyword">d</span>:  列出若干重复项. 应该<span class="keyword">d</span>是取得disable uniq的意思.</span><br><span class="line">-f <span class="keyword">n</span>: 忽略前<span class="keyword">n</span>个字段再来做比较. f <span class="keyword">means</span> fields. 字段间的分隔符是空格或者<span class="keyword">TAB</span>. 从0开始计数. 与-<span class="keyword">n</span>等价.</span><br><span class="line">-s <span class="keyword">n</span>:  忽略前<span class="keyword">n</span>个字符. s <span class="keyword">means</span> characters. 从0开始计数. 与+<span class="keyword">n</span>等价.</span><br><span class="line">-i: 忽略大小写. i <span class="keyword">means</span> ignore case.</span><br><span class="line">-c: 计数. c <span class="keyword">means</span> <span class="keyword">count</span>.</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p> 我来举个例子:<br>我有个文件名字是testfile<br>foo<br>bar<br>foo<br>bar<br>haha<br>haha<br>hehe</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat testfile <span class="string">| uniq</span></span><br><span class="line"></span><br><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">haha</span><br><span class="line">hehe</span><br></pre></td></tr></table></figure>
<p>我们可以看到少了一个haha. foo和bar却还是有重复项. 这就是我前面提到的注意点. 要确保重复项相邻.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat testfile | sort | uniq -c</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> bar</span><br><span class="line"><span class="number">2</span> foo</span><br><span class="line"><span class="number">2</span> haha</span><br><span class="line"><span class="number">1</span> hehe</span><br></pre></td></tr></table></figure></p>
<p>这下就把所有重复项给去掉了, 顺便计了个数.<br>我们再来看-f和-s. 先改下testfile:<br>1st foo<br>2nd bar<br>3rd foo<br>4th bar<br>5th haha<br>6th haha<br>7th hehe</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat testfile | uniq -f <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>st foo</span><br><span class="line"><span class="number">2</span>nd bar</span><br><span class="line"><span class="number">3</span>rd foo</span><br><span class="line"><span class="number">4</span>th bar</span><br><span class="line"><span class="number">5</span>th haha</span><br><span class="line"><span class="number">7</span>th hehe</span><br></pre></td></tr></table></figure>
<p>是不是和第一个例子的结果一样, 少了一个haha.<br>同样的, 忽略前3个字符(从0开始), 结果是一样的.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat testfile | uniq -s <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>st foo</span><br><span class="line"><span class="number">2</span>nd bar</span><br><span class="line"><span class="number">3</span>rd foo</span><br><span class="line"><span class="number">4</span>th bar</span><br><span class="line"><span class="number">5</span>th haha</span><br><span class="line"><span class="number">7</span>th hehe</span><br></pre></td></tr></table></figure></p>
<p>-u和-d根据字面意思理解就好啦, 应该没什么gap, 这里就不举例子了.</p>
<p>最后说下sort, 上面也有用到, 名字起的好, 一下就明白了. TA有挺多参数的, 改天另写一篇介绍下. 回到开头的笔试题, 会用到-r参数, 就是reverse的意思. 说到这里想必你也能秒答这个笔试题了吧:)</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>昨天有个同事谈到一个笔试题:<br>  <em>用shell在一个文件中找出出现次数top50的50个单词, 前提是在这个文件中每行只有一个单词.</em><br>我们几个讨论了一下, 第一感觉都是用最熟悉的grep, 但要实现起来怕是得很多代码. 晚上回家没事瞎逛, 看到网友在某篇技术博客里提到uniq命令, 以前竟然不知道这个command, 请原谅我的无知…我搜了下用法, 让我立刻意识到这个笔试题可以秒答…</p>
</blockquote>
<h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><p>顾名思义, 这个command就是要列出不重复的项(使唯一). 以前一直感觉shell没有set这个数据类型很不方便, 现在完全可以用此命令来弥补了. 需要注意的是: <strong>uniq只比较相邻两项, 也就是说隔行的重复, TA是不care的. 这个时候就需要配合sort命令.</strong><br>参数如下:<br> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="keyword">u</span>:  列出若干唯一项. 应该<span class="keyword">u</span>是取得uniq的意思.</span><br><span class="line">-<span class="keyword">d</span>:  列出若干重复项. 应该<span class="keyword">d</span>是取得disable uniq的意思.</span><br><span class="line">-f <span class="keyword">n</span>: 忽略前<span class="keyword">n</span>个字段再来做比较. f <span class="keyword">means</span> fields. 字段间的分隔符是空格或者<span class="keyword">TAB</span>. 从0开始计数. 与-<span class="keyword">n</span>等价.</span><br><span class="line">-s <span class="keyword">n</span>:  忽略前<span class="keyword">n</span>个字符. s <span class="keyword">means</span> characters. 从0开始计数. 与+<span class="keyword">n</span>等价.</span><br><span class="line">-i: 忽略大小写. i <span class="keyword">means</span> ignore case.</span><br><span class="line">-c: 计数. c <span class="keyword">means</span> <span class="keyword">count</span>.</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="linux uniq" scheme="http://yoursite.com/tags/linux-uniq/"/>
    
      <category term="shell programming" scheme="http://yoursite.com/categories/shell-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux控制USB的绑定/解绑]]></title>
    <link href="http://yoursite.com/2015/10/13/linux%E6%8E%A7%E5%88%B6USB%E7%9A%84%E7%BB%91%E5%AE%9A-%E8%A7%A3%E7%BB%91/"/>
    <id>http://yoursite.com/2015/10/13/linux控制USB的绑定-解绑/</id>
    <published>2015-10-13T05:16:31.000Z</published>
    <updated>2015-12-27T06:03:43.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天工作中遇到一个问题， 要用代码实现USB的enable和disable. 谷歌了一番, 最终找到理想答案, 我在这里做一个简短porting. 来源：<a href="https://www.linux.com/community/blogs/133-general-linux/727195-disable-a-enable-usb-from-terminal" target="_blank" rel="external">墙外某博</a></p>
</blockquote>
<h4 id="u9996_u5148_u901A_u8FC7lsusb_-t_u6765_u67E5_u770BUSB_u7AEF_u53E3_u4FE1_u606F_uFF1A"><a href="#u9996_u5148_u901A_u8FC7lsusb_-t_u6765_u67E5_u770BUSB_u7AEF_u53E3_u4FE1_u606F_uFF1A" class="headerlink" title="首先通过lsusb -t来查看USB端口信息："></a>首先通过lsusb -t来查看USB端口信息：</h4><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    /:  Bus <span class="number">02.</span>Port <span class="number">1</span>: Dev <span class="number">1</span>, Class=root_hub, Driver=ehci-pci/<span class="number">3</span>p, <span class="number">480</span>M</span><br><span class="line">    |__ Port <span class="number">1</span>: Dev <span class="number">2</span>, If <span class="number">0</span>, Class=hub, Driver=hub/<span class="number">8</span>p, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">0</span>, Class=vend., Driver=, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">1</span>, Class=vend., Driver=usbfs, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">2</span>, Class=comm., Driver=cdc_acm, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">3</span>, Class=data, Driver=cdc_acm, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">4</span>, Class=comm., Driver=cdc_acm, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">5</span>, Class=data, Driver=cdc_acm, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">6</span>, Class=comm., Driver=cdc_acm, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">6</span>: Dev <span class="number">78</span>, If <span class="number">7</span>, Class=data, Driver=cdc_acm, <span class="number">480</span>M</span><br><span class="line">/:  Bus <span class="number">01.</span>Port <span class="number">1</span>: Dev <span class="number">1</span>, Class=root_hub, Driver=ehci-pci/<span class="number">3</span>p, <span class="number">480</span>M</span><br><span class="line">    |__ Port <span class="number">1</span>: Dev <span class="number">2</span>, If <span class="number">0</span>, Class=hub, Driver=hub/<span class="number">6</span>p, <span class="number">480</span>M</span><br><span class="line">        |__ Port <span class="number">1</span>: Dev <span class="number">6</span>, If <span class="number">0</span>, Class=HID, Driver=usbhid, <span class="number">1.5</span>M</span><br><span class="line">        |__ Port <span class="number">1</span>: Dev <span class="number">6</span>, If <span class="number">1</span>, Class=HID, Driver=usbhid, <span class="number">1.5</span>M</span><br><span class="line">        |__ Port <span class="number">3</span>: Dev <span class="number">9</span>, If <span class="number">0</span>, Class=HID, Driver=usbhid, <span class="number">1.5</span>M</span><br></pre></td></tr></table></figure>
<p>  (注： 你可以插拔一下要控制的USB， 来确定到底是哪个BUS的哪个port.）<br>在这里我要操作BUS 02的port 1下的port 6.</p>
<h4 id="u6267_u884C_u4EE5_u4E0Bcommand_u53BBunbind_u8FD9_u4E2AUSB_3A"><a href="#u6267_u884C_u4EE5_u4E0Bcommand_u53BBunbind_u8FD9_u4E2AUSB_3A" class="headerlink" title="执行以下command去unbind这个USB:"></a>执行以下command去unbind这个USB:</h4> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'2-1.6'</span> | sudo tee <span class="regexp">/sys/</span>bus<span class="regexp">/usb/</span>drivers<span class="regexp">/usb/u</span>nbind</span><br></pre></td></tr></table></figure>
<p>其实用不用tee都行, 直接重定向也可以. 需要注意的是, 所要echo的字符串:<code>&quot;$bus_num&quot;-&quot;$port1_num&quot;.&quot;$port2_num&quot;</code><br>大概是这么个format.</p>
<h4 id="u91CD_u65B0bind_u7684command_2C__u53EA_u9700_u8981_u628A_u4E0A_u9762command_u4E2D_u7684unbind_u6539_u6210bind"><a href="#u91CD_u65B0bind_u7684command_2C__u53EA_u9700_u8981_u628A_u4E0A_u9762command_u4E2D_u7684unbind_u6539_u6210bind" class="headerlink" title="重新bind的command, 只需要把上面command中的unbind改成bind."></a>重新bind的command, 只需要把上面command中的unbind改成bind.</h4><p><code>echo &#39;2-1.6&#39; | sudo tee /sys/bus/usb/drivers/usb/bind</code></p>
<p>That’s it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天工作中遇到一个问题， 要用代码实现USB的enable和disable. 谷歌了一番, 最终找到理想答案, 我在这里做一个简短porting. 来源：<a href="https://www.linux.com/community/blogs/133-general-linux/727195-disable-a-enable-usb-from-terminal">墙外某博</a></p>
</blockquote>
<h4 id="u9996_u5148_u901A_u8FC7lsusb_-t_u6765_u67E5_u770BUSB_u7AEF_u53E3_u4FE1_u606F_uFF1A"><a href="#u9996_u5148_u901A_u8FC7lsusb_-t_u6765_u67E5_u770BUSB_u7AEF_u53E3_u4FE1_u606F_uFF1A" class="headerlink" title="首先通过lsusb -t来查看USB端口信息："></a>首先通过lsusb -t来查看USB端口信息：</h4>]]>
    
    </summary>
    
      <category term="linux usb" scheme="http://yoursite.com/tags/linux-usb/"/>
    
      <category term="shell programming" scheme="http://yoursite.com/categories/shell-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[logging模块学习]]></title>
    <link href="http://yoursite.com/2015/08/20/logging%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2015/08/20/logging模块学习/</id>
    <published>2015-08-20T05:04:50.000Z</published>
    <updated>2016-01-25T16:41:39.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这个模块经常用, 由于用法比较复杂, 老是用一次忘一次. 今天写一篇学习笔记, 加深印象. refer to: <a href="https://docs.python.org/2.7/howto/logging.html" target="_blank" rel="external">python tutorial</a></p>
</blockquote>
<h5 id="u5404_u4E2Alevel_u7684_u8BF4_u660E_28_u6309_u7B49_u7EA7_u9AD8_u4F4E_u6392_u5E8F_29_3A"><a href="#u5404_u4E2Alevel_u7684_u8BF4_u660E_28_u6309_u7B49_u7EA7_u9AD8_u4F4E_u6392_u5E8F_29_3A" class="headerlink" title="各个level的说明(按等级高低排序):"></a>各个level的说明(按等级高低排序):</h5><table>
<thead>
<tr>
<th>levels</th>
<th>说明  </th>
</tr>
</thead>
<tbody>
<tr>
<td>DEBUG</td>
<td>用来诊断是否有bug的详细信息</td>
</tr>
<tr>
<td>INFO</td>
<td>确认程序按预想的执行</td>
</tr>
<tr>
<td>WARNING</td>
<td>提示有不期望的事情发生, 或者可能会引起某些未来的问题</td>
</tr>
<tr>
<td>ERROR</td>
<td>提示某些更严重的信息, 已经引起某些功能的丧失</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>提示某些更严重的错误, 这些错误会导致程序不能往下执行</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h5 id="u6A21_u5757_u4F7F_u7528_3A"><a href="#u6A21_u5757_u4F7F_u7528_3A" class="headerlink" title="模块使用:"></a>模块使用:</h5><h6 id="u9996_u5148_u9700_u8981logging-basicConfig_28_29_u6765_u914D_u7F6E_2C__u4EE5_u4E0B_u662F_u53C2_u6570_u8BF4_u660E_3A"><a href="#u9996_u5148_u9700_u8981logging-basicConfig_28_29_u6765_u914D_u7F6E_2C__u4EE5_u4E0B_u662F_u53C2_u6570_u8BF4_u660E_3A" class="headerlink" title="首先需要logging.basicConfig()来配置, 以下是参数说明:"></a>首先需要logging.basicConfig()来配置, 以下是参数说明:</h6><ol>
<li>filename: 指定log文件存放位置.</li>
<li>filemode: 与filename搭配使用. 如果赋值为’w’, 执行生成的log会覆盖上次的文件.</li>
<li>level: 指定log的等级. 比如赋值为logging.DEBUG, 则包括DEBUG以及比DEBUG更重要的等级. 默认的level值是logging.WARNING</li>
<li><p>format: 需要对<a href="https://docs.python.org/2.7/library/logging.html#logrecord-attributes" target="_blank" rel="external">logRecord attributes</a>引用. 引用方式为: %(attr)s</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.<span class="function"><span class="title">basicConfig</span><span class="params">(format=<span class="string">'%(asctime)s %(message)s'</span>, ...)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果format里使用了asctime, 那么datefmt参数可以配置时间显示方式:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(<span class="keyword">format</span>=<span class="string">'%(asctime)s, datefmt='</span><span class="variable">%m</span>/<span class="variable">%d</span>/<span class="variable">%Y</span>  <span class="variable">%H</span>:<span class="variable">%M</span>:<span class="variable">%S</span><span class="string">')</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="u5176_u4ED6_u7528_u6CD5_3A"><a href="#u5176_u4ED6_u7528_u6CD5_3A" class="headerlink" title="其他用法:"></a>其他用法:</h5><p>可以在执行python文件时命令行指定level等级:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--log=INFO</span></span><br></pre></td></tr></table></figure></p>
<p>在python文件中获取:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numeric = <span class="function"><span class="title">getattr</span><span class="params">(logging, loglevel.upper()</span></span>, None)</span><br><span class="line"><span class="keyword">if</span> not <span class="function"><span class="title">isinstance</span><span class="params">(numeric, int)</span></span>:</span><br><span class="line">        raise <span class="function"><span class="title">ValueError</span><span class="params">(<span class="string">'Invalid log level %s'</span> % loglevel)</span></span></span><br><span class="line">logging.<span class="function"><span class="title">basicConfig</span><span class="params">(level=numeric, ....)</span></span></span><br></pre></td></tr></table></figure></p>
<p>还有很多高阶的用法, 一般用不到. 如果你感兴趣, 可参考: <a href="https://docs.python.org/2.7/howto/logging.html#logging-advanced-tutorial" target="_blank" rel="external">advanced usage of logging</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这个模块经常用, 由于用法比较复杂, 老是用一次忘一次. 今天写一篇学习笔记, 加深印象. refer to: <a href="https://docs.python.org/2.7/howto/logging.html">python tutorial</a></p>
</blockquote>
<h5 id="u5404_u4E2Alevel_u7684_u8BF4_u660E_28_u6309_u7B49_u7EA7_u9AD8_u4F4E_u6392_u5E8F_29_3A"><a href="#u5404_u4E2Alevel_u7684_u8BF4_u660E_28_u6309_u7B49_u7EA7_u9AD8_u4F4E_u6392_u5E8F_29_3A" class="headerlink" title="各个level的说明(按等级高低排序):"></a>各个level的说明(按等级高低排序):</h5><table>
<thead>
<tr>
<th>levels</th>
<th>说明  </th>
</tr>
</thead>
<tbody>
<tr>
<td>DEBUG</td>
<td>用来诊断是否有bug的详细信息</td>
</tr>
<tr>
<td>INFO</td>
<td>确认程序按预想的执行</td>
</tr>
<tr>
<td>WARNING</td>
<td>提示有不期望的事情发生, 或者可能会引起某些未来的问题</td>
</tr>
<tr>
<td>ERROR</td>
<td>提示某些更严重的信息, 已经引起某些功能的丧失</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>提示某些更严重的错误, 这些错误会导致程序不能往下执行</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="python logging" scheme="http://yoursite.com/tags/python-logging/"/>
    
      <category term="模块学习" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[subprocess模块学习]]></title>
    <link href="http://yoursite.com/2015/07/17/subprocess%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2015/07/17/subprocess模块学习/</id>
    <published>2015-07-17T05:07:15.000Z</published>
    <updated>2015-12-27T06:09:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>subprocess也是一个常用的模块，目前工作所涉及的都比较浅，所以这里只列出一些基本用法和注意点（只适用*nix系统）。以后用到advanced的内容，会更新此文章。refer to: <a href="https://docs.python.org/2/library/subprocess.html?highlight=subprocess#module-subprocess" target="_blank" rel="external">python DOC</a></p>
</blockquote>
<h5 id="u5B9A_u4E49_uFF1A"><a href="#u5B9A_u4E49_uFF1A" class="headerlink" title="定义："></a>定义：</h5><p>spawn新的进程，连接input/output/error管道，并获取错误码。<br>以下模块不建议继续使用，而用subprocess取代：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os.system</span><br><span class="line">os.spawn<span class="keyword">*</span></span><br><span class="line">os.popen<span class="keyword">*</span></span><br><span class="line">popen2.<span class="keyword">*</span></span><br><span class="line">commands.<span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<p>subprocess确实是更加强大，而且以前的模块有时候会有bug。</p>
<a id="more"></a>
<h5 id="u7528_u6CD5_uFF1A"><a href="#u7528_u6CD5_uFF1A" class="headerlink" title="用法："></a>用法：</h5><h6 id="call_3A"><a href="#call_3A" class="headerlink" title="call:"></a>call:</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">subprocess.<span class="function"><span class="title">call</span><span class="params">([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</span></span></span><br><span class="line">subprocess.<span class="function"><span class="title">call</span><span class="params">(<span class="string">"exit 1"</span>, shell=True)</span></span></span><br></pre></td></tr></table></figure>
<p>如果只需要获取子进程的错误码，这个方法就足够了，而且非常好用。<br>可以看到它有两种用法，doc里推荐第一种，就是传一个字符串list（把cmd split成为一个list）。第二种呢是直接传一个字符串cmd，并把参数shell赋值为true。<br>如果用第一种的话，有个模块shlex，可以把cmd分解成list，并很好的处理空格和引号。cmd复杂的话建议这么使用，不会出错。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import shlex</span><br><span class="line">command_line = <span class="function"><span class="title">raw_input</span><span class="params">()</span></span></span><br><span class="line">/bin/vikings -<span class="tag">input</span> eggs<span class="class">.txt</span> -output <span class="string">"spam spam.txt"</span> -cmd <span class="string">"echo '$MONEY'"</span></span><br><span class="line">args = shlex.<span class="function"><span class="title">split</span><span class="params">(command_line)</span></span></span><br><span class="line">print args</span><br><span class="line">[<span class="string">'/bin/vikings'</span>, <span class="string">'-input'</span>, <span class="string">'eggs.txt'</span>, <span class="string">'-output'</span>, <span class="string">'spam spam.txt'</span>, <span class="string">'-cmd'</span>, <span class="string">"echo '$MONEY'"</span>]</span><br></pre></td></tr></table></figure></p>
<p>第二种用法简单易懂，就不说了。看似两种方法都可以，但这里有个很大的坑：<br><strong><em>如果cmd里有管道符，一定要用第二种，否则exit code会不准。</em></strong><br>具体原因我还没细看，童鞋们有精力可以深入研究一下。就是因为这个坑才让我重新学习这个模块，也就有了这篇blog…</p>
<h6 id="check_call_u548Ccheck_output_3A"><a href="#check_call_u548Ccheck_output_3A" class="headerlink" title="check_call和check_output:"></a>check_call和check_output:</h6><p>check_call和call用法基本一样，唯一的不同点是如果exit code非零，check_call会raise一个CalledProcessError。<br>check_output也是一样的道理，非零会raise一个CalledProcessError。但它return的是output。它还有个属性returncode来获取退出码。</p>
<h6 id="Popen_3A"><a href="#Popen_3A" class="headerlink" title="Popen:"></a>Popen:</h6><p>最common的方法，可以操作input/output/error管道，并获得exit code。<br>Popen和前面的方法有个很大的不同点是, process会丢在后台运行。 而call等方法会等到proccess运行结束才返回。在使用的时候要多加注意。<br>我用一段代码来说明其用法：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> <span class="type">Popen</span>, <span class="type">PIPE</span></span><br><span class="line">def get_exitcode_stdout_stderr(cmd):</span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Execute the external command and get its exitcode, stdout and stderr.</span><br><span class="line">    """</span></span><br><span class="line">    args = shlex.split(cmd)</span><br><span class="line">    <span class="keyword">proc</span> = <span class="type">Popen</span>(args, <span class="literal">stdout</span>=<span class="type">PIPE</span>, <span class="literal">stderr</span>=<span class="type">PIPE</span>)</span><br><span class="line">    <span class="keyword">out</span>, err = <span class="keyword">proc</span>.communicate()</span><br><span class="line">    exitcode = <span class="keyword">proc</span>.returncode</span><br><span class="line">    <span class="keyword">return</span> exitcode, <span class="keyword">out</span>, err</span><br><span class="line">cmd = <span class="string">"..."</span>  <span class="comment"># arbitrary external command, e.g. "python mytest.py"</span></span><br><span class="line">exitcode, <span class="keyword">out</span>, err = get_exitcode_stdout_stderr(cmd)</span><br></pre></td></tr></table></figure></p>
<p>应该很容易看懂吧。<br>That’s it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>subprocess也是一个常用的模块，目前工作所涉及的都比较浅，所以这里只列出一些基本用法和注意点（只适用*nix系统）。以后用到advanced的内容，会更新此文章。refer to: <a href="https://docs.python.org/2/library/subprocess.html?highlight=subprocess#module-subprocess">python DOC</a></p>
</blockquote>
<h5 id="u5B9A_u4E49_uFF1A"><a href="#u5B9A_u4E49_uFF1A" class="headerlink" title="定义："></a>定义：</h5><p>spawn新的进程，连接input/output/error管道，并获取错误码。<br>以下模块不建议继续使用，而用subprocess取代：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os.system</span><br><span class="line">os.spawn<span class="keyword">*</span></span><br><span class="line">os.popen<span class="keyword">*</span></span><br><span class="line">popen2.<span class="keyword">*</span></span><br><span class="line">commands.<span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<p>subprocess确实是更加强大，而且以前的模块有时候会有bug。</p>]]>
    
    </summary>
    
      <category term="python subprocess" scheme="http://yoursite.com/tags/python-subprocess/"/>
    
      <category term="模块学习" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python文档学习: 逻辑控制相关]]></title>
    <link href="http://yoursite.com/2015/03/17/python%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0-%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2015/03/17/python文档学习-逻辑控制相关/</id>
    <published>2015-03-17T05:02:44.000Z</published>
    <updated>2015-12-27T05:58:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>refers to <a href="https://docs.python.org/2.7/tutorial/datastructures.html#looping-techniques" target="_blank" rel="external">python tutorial</a></p>
</blockquote>
<h3 id="u4F7F_u7528_u5FAA_u73AF_u7684_u4E00_u4E9B_u6280_u5DE7"><a href="#u4F7F_u7528_u5FAA_u73AF_u7684_u4E00_u4E9B_u6280_u5DE7" class="headerlink" title="使用循环的一些技巧"></a>使用循环的一些技巧</h3><ul>
<li>当我们要循环一个序列(可迭代)的时候, 如果需要同时检索索引和对应的值, 我们可以用内置函数enumerate():<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="tag">i</span>, item <span class="keyword">in</span> <span class="function"><span class="title">enumerate</span><span class="params">(iterable)</span></span>:</span><br><span class="line">     blablabla...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>当我们要同时循环两个序列的时候, 可以用zip():</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">t2 = (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span>  item1, item2 <span class="keyword">in</span> <span class="function"><span class="title">zip</span><span class="params">(t1, t2)</span></span>:</span><br><span class="line">    blablalba...</span><br></pre></td></tr></table></figure>
</li>
<li><p>要倒序的遍历一个序列时, 用reversed():</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">reversed</span><span class="params">(xrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span></span>):</span><br><span class="line">    print i</span><br></pre></td></tr></table></figure>
</li>
<li><p>要遍历一个有序的序列, 用sorted():</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">l</span> = [1, 3, 3, 5]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sorted(<span class="keyword">set</span>(<span class="keyword">l</span>)):</span><br><span class="line">blablabla...</span><br></pre></td></tr></table></figure>
</li>
<li><p>要同时遍历一个字典的键值对时, 用字典对象的iteritems():</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'1'</span>: <span class="string">'a'</span>, <span class="string">'2'</span>: <span class="string">'b'</span>, <span class="string">'3'</span>: <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems(d):</span><br><span class="line">    blablabla...</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后一点建议, 如果想要在遍历过程中修改序列的值, 最好是建一个新序列, 以免误操作.</p>
</li>
</ul>
<h3 id="u5173_u4E8Econdition_u9700_u8981_u6CE8_u610F_u7684_3A"><a href="#u5173_u4E8Econdition_u9700_u8981_u6CE8_u610F_u7684_3A" class="headerlink" title="关于condition需要注意的:"></a>关于condition需要注意的:</h3><ul>
<li>while和if语句里不止可以有比较符, 可以有任何的操作符. 这是python的一个特色, 也是我特别喜欢的一点, 非常简洁好用.<br>比如while或者if后接数字, 如果等于0, 就相当于<em>假</em>, 如果非零那就是<em>真</em>:<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">a</span> = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="operator">not</span> <span class="operator">a</span> * <span class="number">2</span> - b:</span><br><span class="line">    print <span class="string">'hello'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果接序列, 如果非空就代表<em>真</em>, 否则为<em>假</em>:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span> = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="tag">b</span> = []</span><br><span class="line"><span class="keyword">if</span> <span class="tag">a</span>:</span><br><span class="line">    blabla...</span><br><span class="line"><span class="keyword">if</span> <span class="tag">b</span>:</span><br><span class="line">    blabla...</span><br></pre></td></tr></table></figure></p>
<ul>
<li>比较符可以连着用:<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="tag">a</span> &lt; <span class="tag">b</span> == c:</span><br><span class="line">    blabla...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这里先比较a&lt;b, 然后比较b==c.</p>
<ul>
<li>条件语句之间可以用and, or, not; 而不是&amp;&amp;, ||, !. 是不是非常的人性化, 非常的不反人类, 非常的readable. I love this design!!!<br>优先级是这样的: 比较符最高, not次之, and再次之, or最后.<br>比如: not a&gt;b and c or d, 相当于((not (a&gt;b)) and c) or d</li>
<li>and和or被称作是short-circuit操作符. 执行顺序是从左到右, 一旦得到确定值后面的逻辑运算就不做了.<br>比如: 1 or b or c<br>1已经已知了, 后面又接两个or操作符, 无论b和c是真是假最后结果都是真, 所以or b, or c两个运算就都不做了.<br>引用文档的一个例子:<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">a</span> = <span class="string">''</span></span><br><span class="line"><span class="tag">b</span> = <span class="string">'haha'</span></span><br><span class="line">c = <span class="string">'hehe'</span></span><br><span class="line">d = <span class="tag">a</span> or <span class="tag">b</span> or c</span><br><span class="line">d</span><br><span class="line">&gt;&gt;&gt; <span class="string">'haha'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>refers to <a href="https://docs.python.org/2.7/tutorial/datastructures.html#looping-techniques">python tutorial</a></p>
</blockquote>
<h3 id="u4F7F_u7528_u5FAA_u73AF_u7684_u4E00_u4E9B_u6280_u5DE7"><a href="#u4F7F_u7528_u5FAA_u73AF_u7684_u4E00_u4E9B_u6280_u5DE7" class="headerlink" title="使用循环的一些技巧"></a>使用循环的一些技巧</h3><ul>
<li>当我们要循环一个序列(可迭代)的时候, 如果需要同时检索索引和对应的值, 我们可以用内置函数enumerate():<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="tag">i</span>, item <span class="keyword">in</span> <span class="function"><span class="title">enumerate</span><span class="params">(iterable)</span></span>:</span><br><span class="line">     blablabla...</span><br></pre></td></tr></table></figure>
</li>
</ul>]]>
    
    </summary>
    
      <category term="python 文档学习" scheme="http://yoursite.com/tags/python-%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python 逻辑控制" scheme="http://yoursite.com/tags/python-%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python list的一些技巧]]></title>
    <link href="http://yoursite.com/2015/03/15/python-list%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2015/03/15/python-list的一些技巧/</id>
    <published>2015-03-15T04:55:20.000Z</published>
    <updated>2015-12-27T05:57:40.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>觉得很有用, 摘抄自: <a href="http://enml.github.io/site/2014/04/25/python-code/" target="_blank" rel="external">http://enml.github.io/site/2014/04/25/python-code/</a></p>
</blockquote>
<h4 id="u5217_u8868_u76F8_u90BB_u5143_u7D20_u538B_u7F29_u5668"><a href="#u5217_u8868_u76F8_u90BB_u5143_u7D20_u538B_u7F29_u5668" class="headerlink" title="列表相邻元素压缩器"></a>列表相邻元素压缩器</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; zip(*([iter(a)] * <span class="number">2</span>))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent = lambda a, <span class="symbol">k:</span> zip(*([iter(a)] * k))</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">1</span>)</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; zip(a[<span class="symbol">:</span><span class="symbol">:</span><span class="number">2</span>], a[<span class="number">1</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">2</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; zip(a[<span class="symbol">:</span><span class="symbol">:</span><span class="number">3</span>], a[<span class="number">1</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">3</span>], a[<span class="number">2</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">3</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent = lambda a, <span class="symbol">k:</span> zip(*(a[<span class="symbol">i:</span><span class="symbol">:k</span>] for i in range(k)))</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">1</span>)</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="u7528_u538B_u7F29_u5668_u53CD_u8F6C_u5B57_u5178"><a href="#u7528_u538B_u7F29_u5668_u53CD_u8F6C_u5B57_u5178" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line">&gt;&gt;&gt; m.items()</span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">3</span>, <span class="string">'c'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">4</span>, <span class="string">'d'</span>)]</span><br><span class="line">&gt;&gt;&gt; mi = dict(zip(m.values(), m.keys()))</span><br><span class="line">&gt;&gt;&gt; mi</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5217_u8868_u5C55_u5F00"><a href="#u5217_u8868_u5C55_u5F00" class="headerlink" title="列表展开"></a>列表展开</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="tag">a</span> = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">list</span><span class="params">(itertools.chain.from_iterable(a)</span></span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">sum</span><span class="params">(a, [])</span></span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> l <span class="keyword">in</span> <span class="tag">a</span> <span class="keyword">for</span> x <span class="keyword">in</span> l]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="tag">a</span> = [[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</span><br><span class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> l1 <span class="keyword">in</span> <span class="tag">a</span> <span class="keyword">for</span> l2 <span class="keyword">in</span> l1 <span class="keyword">for</span> x <span class="keyword">in</span> l2]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="tag">a</span> = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</span><br><span class="line">&gt;&gt;&gt; flatten = lambda x: [y <span class="keyword">for</span> l <span class="keyword">in</span> x <span class="keyword">for</span> y <span class="keyword">in</span> <span class="function"><span class="title">flatten</span><span class="params">(l)</span></span>] <span class="keyword">if</span> <span class="function"><span class="title">type</span><span class="params">(x)</span></span> is list <span class="keyword">else</span> [x]</span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">flatten</span><span class="params">(a)</span></span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<h4 id="u751F_u6210_u5668_u8868_u8FBE_u5F0F"><a href="#u751F_u6210_u5668_u8868_u8FBE_u5F0F" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g = <span class="list">(<span class="keyword">x</span> <span class="variable">**</span> <span class="number">2</span> for x in xrange<span class="list">(<span class="number">10</span>)</span>)</span></span><br><span class="line">&gt;&gt;&gt; next<span class="list">(<span class="keyword">g</span>)</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt; next<span class="list">(<span class="keyword">g</span>)</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; next<span class="list">(<span class="keyword">g</span>)</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt; next<span class="list">(<span class="keyword">g</span>)</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; sum<span class="list">(<span class="keyword">x</span> <span class="variable">**</span> <span class="number">3</span> for x in xrange<span class="list">(<span class="number">10</span>)</span>)</span></span><br><span class="line"><span class="number">2025</span></span><br><span class="line">&gt;&gt;&gt; sum<span class="list">(<span class="keyword">x</span> <span class="variable">**</span> <span class="number">3</span> for x in xrange<span class="list">(<span class="number">10</span>)</span> if x % <span class="number">3</span> == <span class="number">1</span>)</span></span><br><span class="line"><span class="number">408</span></span><br></pre></td></tr></table></figure>
<p>####字典推导<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; m = &#123;<span class="symbol">x:</span> x ** <span class="number">2</span> for x in range(<span class="number">5</span>)&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="number">0</span><span class="symbol">:</span> <span class="number">0</span>, <span class="number">1</span><span class="symbol">:</span> <span class="number">1</span>, <span class="number">2</span><span class="symbol">:</span> <span class="number">4</span>, <span class="number">3</span><span class="symbol">:</span> <span class="number">9</span>, <span class="number">4</span><span class="symbol">:</span> <span class="number">16</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; m = &#123;<span class="symbol">x:</span> <span class="string">'A'</span> + str(x) for x in range(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="number">0</span><span class="symbol">:</span> <span class="string">'A0'</span>, <span class="number">1</span><span class="symbol">:</span> <span class="string">'A1'</span>, <span class="number">2</span><span class="symbol">:</span> <span class="string">'A2'</span>, <span class="number">3</span><span class="symbol">:</span> <span class="string">'A3'</span>, <span class="number">4</span><span class="symbol">:</span> <span class="string">'A4'</span>, <span class="number">5</span><span class="symbol">:</span> <span class="string">'A5'</span>, <span class="number">6</span><span class="symbol">:</span> <span class="string">'A6'</span>, <span class="number">7</span><span class="symbol">:</span> <span class="string">'A7'</span>, <span class="number">8</span><span class="symbol">:</span> <span class="string">'A8'</span>, <span class="number">9</span><span class="symbol">:</span> <span class="string">'A9'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="u7528_u5B57_u5178_u63A8_u5BFC_u53CD_u8F6C_u5B57_u5178"><a href="#u7528_u5B57_u5178_u63A8_u5BFC_u53CD_u8F6C_u5B57_u5178" class="headerlink" title="用字典推导反转字典"></a>用字典推导反转字典</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&#123;<span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt; &#123;v: k <span class="keyword">for</span> k, v in m.items()&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u547D_u540D_u5143_u7EC4"><a href="#u547D_u540D_u5143_u7EC4" class="headerlink" title="命名元组"></a>命名元组</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Point = collections.<span class="function"><span class="title">namedtuple</span><span class="params">(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; <span class="tag">p</span> = <span class="function"><span class="title">Point</span><span class="params">(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</span></span></span><br><span class="line">&gt;&gt;&gt; <span class="tag">p</span></span><br><span class="line"><span class="function"><span class="title">Point</span><span class="params">(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</span></span></span><br><span class="line">&gt;&gt;&gt; <span class="tag">p</span><span class="class">.x</span></span><br><span class="line"><span class="number">1.0</span></span><br><span class="line">&gt;&gt;&gt; <span class="tag">p</span><span class="class">.y</span></span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure>
<h4 id="u7EE7_u627F_u547D_u540D_u5143_u7EC4"><a href="#u7EE7_u627F_u547D_u540D_u5143_u7EC4" class="headerlink" title="继承命名元组"></a>继承命名元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(collections.namedtuple<span class="params">(<span class="string">'PointBase'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span>)</span>:</span></span><br><span class="line"><span class="prompt">... </span>    __slots__ = ()</span><br><span class="line"><span class="prompt">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="prompt">... </span>            <span class="keyword">return</span> Point(x=self.x + other.x, y=self.y + other.y)</span><br><span class="line">...</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>q = Point(x=<span class="number">2.0</span>, y=<span class="number">3.0</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>p + q</span><br><span class="line">Point(x=<span class="number">3.0</span>, y=<span class="number">5.0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="u6709_u6700_u5927_u957F_u5EA6_u7684_u53CC_u7AEF_u961F_u5217"><a href="#u6709_u6700_u5927_u957F_u5EA6_u7684_u53CC_u7AEF_u961F_u5217" class="headerlink" title="有最大长度的双端队列"></a>有最大长度的双端队列</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; last_three = collections.<span class="function"><span class="title">deque</span><span class="params">(maxlen=<span class="number">3</span>)</span></span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">xrange</span><span class="params">(<span class="number">10</span>)</span></span>:</span><br><span class="line">...     last_three.<span class="function"><span class="title">append</span><span class="params">(i)</span></span></span><br><span class="line">...     print <span class="string">', '</span>.<span class="function"><span class="title">join</span><span class="params">(str(x)</span></span> <span class="keyword">for</span> x <span class="keyword">in</span> last_three)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></span><br><span class="line"><span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></span><br><span class="line"><span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br></pre></td></tr></table></figure>
<h4 id="u53EF_u6392_u5E8F_u8BCD_u5178"><a href="#u53EF_u6392_u5E8F_u8BCD_u5178" class="headerlink" title="可排序词典"></a>可排序词典</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = <span class="function"><span class="title">dict</span><span class="params">((str(x)</span></span>, x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">10</span>)</span></span>)</span><br><span class="line">&gt;&gt;&gt; print <span class="string">', '</span>.<span class="function"><span class="title">join</span><span class="params">(m.keys()</span></span>)</span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt; m = collections.<span class="function"><span class="title">OrderedDict</span><span class="params">((str(x)</span></span>, x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">10</span>)</span></span>)</span><br><span class="line">&gt;&gt;&gt; print <span class="string">', '</span>.<span class="function"><span class="title">join</span><span class="params">(m.keys()</span></span>)</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; m = collections.<span class="function"><span class="title">OrderedDict</span><span class="params">((str(x)</span></span>, x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>, -<span class="number">1</span>)</span></span>)</span><br><span class="line">&gt;&gt;&gt; print <span class="string">', '</span>.<span class="function"><span class="title">join</span><span class="params">(m.keys()</span></span>)</span><br><span class="line"><span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>觉得很有用, 摘抄自: <a href="http://enml.github.io/site/2014/04/25/python-code/">http://enml.github.io/site/2014/04/25/python-code/</a></p>
</blockquote>
<h4 id="u5217_u8868_u76F8_u90BB_u5143_u7D20_u538B_u7F29_u5668"><a href="#u5217_u8868_u76F8_u90BB_u5143_u7D20_u538B_u7F29_u5668" class="headerlink" title="列表相邻元素压缩器"></a>列表相邻元素压缩器</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; zip(*([iter(a)] * <span class="number">2</span>))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent = lambda a, <span class="symbol">k:</span> zip(*([iter(a)] * k))</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">1</span>)</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; zip(a[<span class="symbol">:</span><span class="symbol">:</span><span class="number">2</span>], a[<span class="number">1</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">2</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; zip(a[<span class="symbol">:</span><span class="symbol">:</span><span class="number">3</span>], a[<span class="number">1</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">3</span>], a[<span class="number">2</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">3</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent = lambda a, <span class="symbol">k:</span> zip(*(a[<span class="symbol">i:</span><span class="symbol">:k</span>] for i in range(k)))</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; group_adjacent(a, <span class="number">1</span>)</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="python programming" scheme="http://yoursite.com/categories/python-programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bc command in shell]]></title>
    <link href="http://yoursite.com/2015/02/27/bc-command-in-shell/"/>
    <id>http://yoursite.com/2015/02/27/bc-command-in-shell/</id>
    <published>2015-02-27T04:46:13.000Z</published>
    <updated>2016-01-25T16:28:38.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>  昨天在工作中遇到这么一个问题, 在shell中比较浮点数和整数的大小. 原本以为用shell的比较符号(-lt之类的)就可以, 没想到一试不行.<br> 问了度娘后才发现, shell原则上是不支持浮点数计算的.<br>  因为着急用, 就随便找了个帖子说可以这么比:<br>  <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  expr <span class="variable">$a</span> \&gt; <span class="variable">$b</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>  我没test就直接先push到公司的repo了, reviewer估计也没用过, 看了下就merge了.<br> 今天跑脚本才发现根本就不能这么用啊, holy shit. 最后找到了bc这个神器, 问了下度娘, 都没什么好文章. 索性就直接上官网看<a href="https://www.gnu.org/software/bc/manual/html_mono/bc.html#SEC3" target="_blank" rel="external">manual</a>.<br>  好了, 废话说了一大堆, 现在来说说bc吧:)</p>
</blockquote>
<p>首先, bc可以是交互性的, 也支持在管道符后面使用.<br>所以一些复杂的有关浮点数的运算, 完全可以结合expect脚本, 个人感觉会很方便. 如果用awk算, 估计会吐…<br>像我昨天遇到的普通运算完全就可以用管道啦.<br>一般来说在脚本中可以这么用:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=$(bc &#60;&#60; EOF&#10;  28.3 * 55.8&#10;  EOF)</span><br></pre></td></tr></table></figure></p>
<p>bc可以说totally就是一门语言. 有变量, 有逻辑控制, 亦有函数.<br><a id="more"></a></p>
<h3 id="u57FA_u672C_u5143_u7D20"><a href="#u57FA_u672C_u5143_u7D20" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>数字<br>最基本的元素, 可以是整数也可以是浮点数. manual里说支持<strong>任意</strong>精度, 注意这任意两字, 有没有碉堡了.</li>
<li>变量<br>变量可以是简单变量, 也可以是数组. 变量的命名以任意字母开头, 中间可以是任意数字/字母/下划线. 但有一点需要注意, 字母必须都是<strong>小写</strong>.<br>数组是用方括号表示.<br>有四个特殊的变量: scale, ibase, obase和last. scale表示小数点后位数, ibase和obase表示input和output是什么进制的, 我们这里不做说明, 有兴趣的同学可以直接看manual. last表示最后一个打印的数值.</li>
<li>注释<br>多行注释: /* …… */<br>单行注释: #</li>
</ul>
<h3 id="u652F_u6301_u7684_u8FD0_u7B97"><a href="#u652F_u6301_u7684_u8FD0_u7B97" class="headerlink" title="支持的运算"></a>支持的运算</h3><p>加减乘除/乘方/地板除/自加/自减</p>
<blockquote>
<p>摘自manual:<br>- expr<br>The result is the negation of the expression.<br>++ var<br>The variable is incremented by one and the new value is the result of the expression.<br>– var<br>The variable is decremented by one and the new value is the result of the expression.<br>var ++<br>The result of the expression is the value of the variable and then the variable is incremented by one.<br>var –<br>The result of the expression is the value of the variable and then the variable is decremented by one.<br>expr + expr<br>The result of the expression is the sum of the two expressions.<br>expr - expr<br>The result of the expression is the difference of the two expressions.<br>expr * expr<br>The result of the expression is the product of the two expressions.<br>expr / expr<br>The result of the expression is the quotient of the two expressions. The scale of the result is the value of the variable scale<br>expr % expr<br>The result of the expression is the “remainder” and it is computed in the following way. To compute a%b, first a/b is computed to scale<br> digits. That result is used to compute a-(a/b)*b to the scale of the maximum of scale<br>+scale(b) and scale(a). If scale<br> is set to zero and both expressions are integers this expression is the integer remainder function.<br>expr ^ expr<br>The result of the expression is the value of the first raised to the second. The second expression must be an integer. (If the second expression is not an integer, a warning is generated and the expression is truncated to get an integer value.) The scale of the result is scale<br> if the exponent is negative. If the exponent is positive the scale of the result is the minimum of the scale of the first expression times the value of the exponent and the maximum of scale<br> and the scale of the first expression. (e.g. scale(a^b) = min(scale(a)*b, max(scale<br>, scale(a))).) It should be noted that expr^0 will always return the value of 1.<br>( expr )<br>This alters the standard precedence to force the evaluation of the expression.<br>var = expr<br>The variable is assigned the value of the expression.<br>var <op>= expr<br>This is equivalent to “var = var <op> expr” with the exception that the “var” part is evaluated only once. This can make a difference if “var” &gt; is an array.</op></op></p>
</blockquote>
<h3 id="u6BD4_u8F83_u7B26"><a href="#u6BD4_u8F83_u7B26" class="headerlink" title="比较符"></a>比较符</h3><p>>, &lt;, &lt;=, &gt;=, ==, !=</p>
<h3 id="u8BED_u53E5"><a href="#u8BED_u53E5" class="headerlink" title="语句"></a>语句</h3><ul>
<li>if语句:<br>if ( expression ) { statement1 } [else { statement2 }]</li>
<li>while语句:<br>while ( expression ) { statement }</li>
<li>for语句:<br>for ( [expression1] ; [expression2] ; [expression3] ) { statement }<br><strong>所有循环语句里都支持continue和break</strong></li>
</ul>
<h3 id="u51FD_u6570"><a href="#u51FD_u6570" class="headerlink" title="函数"></a>函数</h3><p>define name ( parameters ) { newline<br>    auto_list   statement_list }<br>例如:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define <span class="keyword">d</span> (<span class="keyword">n</span>) &#123; <span class="keyword">return</span> (2*<span class="keyword">n</span>); &#125;</span><br></pre></td></tr></table></figure></p>
<p>还有几个内置的函数用来计算三角函数, 这里我就不说了, 感兴趣就仔细看下manual中相应的部分.</p>
<p>我这里写一个非常简单的例子供参考:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">define <span class="title">square</span> <span class="params">(x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x ^ <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">a += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">square(a)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>  昨天在工作中遇到这么一个问题, 在shell中比较浮点数和整数的大小. 原本以为用shell的比较符号(-lt之类的)就可以, 没想到一试不行.<br> 问了度娘后才发现, shell原则上是不支持浮点数计算的.<br>  因为着急用, 就随便找了个帖子说可以这么比:<br>  <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  expr <span class="variable">$a</span> \&gt; <span class="variable">$b</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>  我没test就直接先push到公司的repo了, reviewer估计也没用过, 看了下就merge了.<br> 今天跑脚本才发现根本就不能这么用啊, holy shit. 最后找到了bc这个神器, 问了下度娘, 都没什么好文章. 索性就直接上官网看<a href="https://www.gnu.org/software/bc/manual/html_mono/bc.html#SEC3">manual</a>.<br>  好了, 废话说了一大堆, 现在来说说bc吧:)</p>
</blockquote>
<p>首先, bc可以是交互性的, 也支持在管道符后面使用.<br>所以一些复杂的有关浮点数的运算, 完全可以结合expect脚本, 个人感觉会很方便. 如果用awk算, 估计会吐…<br>像我昨天遇到的普通运算完全就可以用管道啦.<br>一般来说在脚本中可以这么用:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=$(bc &#60;&#60; EOF&#10;  28.3 * 55.8&#10;  EOF)</span><br></pre></td></tr></table></figure></p>
<p>bc可以说totally就是一门语言. 有变量, 有逻辑控制, 亦有函数.<br>]]>
    
    </summary>
    
      <category term="bc" scheme="http://yoursite.com/tags/bc/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="shell programming" scheme="http://yoursite.com/categories/shell-programming/"/>
    
  </entry>
  
</feed>
